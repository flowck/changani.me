{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/firminocustomtheme/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/some-views-on-generic-functions-typescript.jpg","path":"blog-images/some-views-on-generic-functions-typescript.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/github-gist.css","path":"css/github-gist.css","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/main.sass","path":"css/main.sass","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/firminochangani.png","path":"img/firminochangani.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/accessing-filters.jpg","path":"blog-images/accessing-filters.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/comparing-objectids.jpg","path":"blog-images/comparing-objectids.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/concurrent.gif","path":"blog-images/concurrent.gif","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/import-svelte-components-with-an-alias.jpg","path":"blog-images/import-svelte-components-with-an-alias.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/me-2018.jpg","path":"img/me-2018.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg","path":"blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/searching-inside-of-an-array-of-objects.jpg","path":"blog-images/searching-inside-of-an-array-of-objects.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/non-concurrent.gif","path":"blog-images/non-concurrent.gif","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/sequelize-and-uuid-as-primary-key.jpg","path":"blog-images/sequelize-and-uuid-as-primary-key.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/urlfy.xyz.png","path":"blog-images/urlfy.xyz.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/using-sass-variables-inside-vue-components.png","path":"blog-images/using-sass-variables-inside-vue-components.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/Executing-concurrent-HTTP-requests.png","path":"blog-images/Executing-concurrent-HTTP-requests.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/me-2020.png","path":"img/me-2020.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","path":"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/firminocustomtheme/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1593357294649},{"_id":"themes/firminocustomtheme/README.md","hash":"4cd14dd17c22ce6ae75287ae30050d062a48e836","modified":1593357294650},{"_id":"themes/firminocustomtheme/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1593357294650},{"_id":"themes/firminocustomtheme/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1593357294652},{"_id":"source/_posts/Accessing-vue-global-filters-inside-component-methods-and-lifecycle-hooks.md","hash":"1f260ec10fbd82767cae5b67c549fe8f2bc3ddc1","modified":1593357776043},{"_id":"source/_posts/Building-URLFY-The-idea.md","hash":"f459b949af5c496e95f53c3c7c10626325d5d9ae","modified":1593357776043},{"_id":"source/_posts/CSS-links-with-sliding-underline-effect-through-pseudo-elements.md","hash":"f29a75d4194bfeef151ac9b977e7e3289f231558","modified":1593357776044},{"_id":"source/_posts/Comparing-MongoDB-ObjectIds.md","hash":"fc3907aec54f86df9678ca84df0f895b5330fe8b","modified":1593357776044},{"_id":"source/_posts/Executing-concurrent-HTTP-requests.md","hash":"59785f96a4b81df923672812871d8c3168b2df64","modified":1593357776044},{"_id":"source/_posts/Import-svelte-components-using-an-alias.md","hash":"9f6da1f87a1d49cfa42238cd1d9f5a1bc13b58ff","modified":1593357776044},{"_id":"source/_posts/MongoDB-Mongoose-minimal-offset-based-pagination.md","hash":"da42fc3c75c2a0b0c69025b9a021ee9e04a97854","modified":1593357776044},{"_id":"source/_posts/Searching-inside-of-an-array-of-objects.md","hash":"36f4dce3342269216dde340ea46501c08c6fd389","modified":1593357776045},{"_id":"source/_posts/Sequelize-and-UUID-as-primary-key.md","hash":"96e60538a79a051e13ea5fd29ac40c34a300eb37","modified":1593357776045},{"_id":"source/_posts/Some-views-on-generic-functions-typescript.md","hash":"ee48e6ff71dd305af62a0abd4a366c2557b3a645","modified":1594149002598},{"_id":"source/_posts/Using-SASS-variables-inside-vue-components.md","hash":"de316fd3c477207496dee34740dcf7f66533534a","modified":1593357776045},{"_id":"themes/firminocustomtheme/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1593357294650},{"_id":"themes/firminocustomtheme/languages/pt.yml","hash":"10ac1e67cd67db2f2ba8caf82fdd5e1042bac037","modified":1593357294650},{"_id":"themes/firminocustomtheme/layout/index.pug","hash":"f4c92fb42bdc8b638bff77d453889533e7a5a305","modified":1593357842004},{"_id":"themes/firminocustomtheme/layout/post.pug","hash":"723ac17f5a9809c1a86225798df3ddc4c728164c","modified":1593357776046},{"_id":"themes/firminocustomtheme/source/.DS_Store","hash":"ebbc3bb918bd8bbae371530859f7e5a11befa925","modified":1593819665509},{"_id":"themes/firminocustomtheme/source/js/script.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1593357776057},{"_id":"themes/firminocustomtheme/layout/partial/about.pug","hash":"72a47cf7c3341187c3fdf507ac290a95d93e19a0","modified":1593818556014},{"_id":"themes/firminocustomtheme/layout/partial/disqus.pug","hash":"b1f4cbff6e02fdf580da316cd2ac3fd24fdee659","modified":1593357776046},{"_id":"themes/firminocustomtheme/layout/partial/footer.pug","hash":"bc20d84c3825d9be0e082cff72217f1ee600feeb","modified":1593357776046},{"_id":"themes/firminocustomtheme/layout/partial/header.pug","hash":"94a482c972e9ae2cfdb6fa3c30fc1c4b7ba7e784","modified":1593357776046},{"_id":"themes/firminocustomtheme/source/blog-images/some-views-on-generic-functions-typescript.jpg","hash":"16a31a001926e29cff4e85ed9bbb43d691d370db","modified":1593820339961},{"_id":"themes/firminocustomtheme/source/css/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1593357776054},{"_id":"themes/firminocustomtheme/source/css/main.sass","hash":"d220da88d0197519878d005bf3c26dc41db8d217","modified":1593357776055},{"_id":"themes/firminocustomtheme/source/js/highlight.pack.js","hash":"364fff02e62878ff62d1ab15ed167d79f724a69a","modified":1593357776057},{"_id":"themes/firminocustomtheme/source/img/favicon.png","hash":"24a69506b188a8519fb758abb3cc7a653afcb021","modified":1593357776056},{"_id":"themes/firminocustomtheme/source/img/firminochangani.png","hash":"8dff31c410dcc6ffcb483092fd7d1bc656115fae","modified":1593357776056},{"_id":"themes/firminocustomtheme/source/blog-images/accessing-filters.jpg","hash":"fc8c94d8d6cca63709312106b4bc697877823186","modified":1593357776048},{"_id":"themes/firminocustomtheme/source/blog-images/comparing-objectids.jpg","hash":"6cb2c590d72061b5c864ccc5dfc433e5df59ac20","modified":1593357776049},{"_id":"themes/firminocustomtheme/source/blog-images/concurrent.gif","hash":"e3858c8db8c29eb9ac35a535a9f3230cc29d95ac","modified":1593357294656},{"_id":"themes/firminocustomtheme/source/blog-images/import-svelte-components-with-an-alias.jpg","hash":"69fd987e2b146595216fdb3cdc60015ea5f6dd4e","modified":1593357776049},{"_id":"themes/firminocustomtheme/source/img/me-2018.jpg","hash":"79b37a4f30dc483f7f381382cda4edc1b0606385","modified":1593818462219},{"_id":"themes/firminocustomtheme/source/blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg","hash":"a056bd910abc783563424080014918bd521047ff","modified":1593357776049},{"_id":"themes/firminocustomtheme/source/blog-images/searching-inside-of-an-array-of-objects.jpg","hash":"8b04f5b19cbf1e152d4ebc3a997345d38ab5d832","modified":1593357776051},{"_id":"themes/firminocustomtheme/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1593357294664},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1593357294665},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1593357294666},{"_id":"themes/firminocustomtheme/source/css/partials/_about-me.sass","hash":"c65094533200ec57b228edd549893c8cea380ae4","modified":1593357776055},{"_id":"themes/firminocustomtheme/source/css/partials/_post.sass","hash":"ced4aa662f467ebef33eae8f43a02efccdb64320","modified":1593357776055},{"_id":"themes/firminocustomtheme/source/css/partials/_variables.sass","hash":"102baf696dedf3327eb0ea0ca980a3f0e79c482c","modified":1593357294668},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1593357294666},{"_id":"themes/firminocustomtheme/source/blog-images/non-concurrent.gif","hash":"2eaabdc42285d206316253a093efcf9afb0ce3dc","modified":1593357294660},{"_id":"themes/firminocustomtheme/source/blog-images/sequelize-and-uuid-as-primary-key.jpg","hash":"276e198acb098b003a3731e918584eca269def71","modified":1593357776052},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1593357294665},{"_id":"themes/firminocustomtheme/source/blog-images/urlfy.xyz.png","hash":"24195ec06229d3d9bc3a0ec3739e55dda7bbc03a","modified":1593357776053},{"_id":"themes/firminocustomtheme/source/blog-images/using-sass-variables-inside-vue-components.png","hash":"8a2c50acc56d2974cb376a1505c1fa1922463907","modified":1593357776054},{"_id":"themes/firminocustomtheme/source/blog-images/Executing-concurrent-HTTP-requests.png","hash":"aa9bd5c790d567d9ccd9fe07f9c624c463246ee7","modified":1593357776048},{"_id":"themes/firminocustomtheme/source/img/me-2020.png","hash":"46768b3f9eb738a6e36c18f28ead8f44a8590e56","modified":1593818466050},{"_id":"themes/firminocustomtheme/source/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","hash":"4198bc511091ff3eac6dc5cad9d87d45fda7f1ae","modified":1593357776051},{"_id":"public/2020/07/04/Some-views-on-generic-functions-typescript/index.html","hash":"2c8c97a3a8fc85978e7153c7d7d16bfb5c0e62a7","modified":1594149058042},{"_id":"public/2020/02/18/Import-svelte-components-using-an-alias/index.html","hash":"9ba6917762d808c6523513244a68a99ef9f2e056","modified":1594149058042},{"_id":"public/2020/02/10/Searching-inside-of-an-array-of-objects/index.html","hash":"fab4c0500673c1c8bad64bf95164770a86d27143","modified":1594149058042},{"_id":"public/2020/02/06/CSS-links-with-sliding-underline-effect-through-pseudo-elements/index.html","hash":"6cc3f4cfcd0a44cc46ce86de93b4ce84d351cfd8","modified":1594149058042},{"_id":"public/2020/02/06/Sequelize-and-UUID-as-primary-key/index.html","hash":"5fcd5849d50f689b8c31605d0420181f8f5c2313","modified":1594149058042},{"_id":"public/2020/02/02/Accessing-vue-global-filters-inside-component-methods-and-lifecycle-hooks/index.html","hash":"1b4b2882fecbbda766ac97ed069ae09592034af7","modified":1594149058042},{"_id":"public/2020/01/27/Comparing-MongoDB-ObjectIds/index.html","hash":"237724c77a7144109866444954aa699d0eb4c85e","modified":1594149058042},{"_id":"public/2020/01/22/Using-SASS-variables-inside-vue-components/index.html","hash":"09c2703aef10e4723d782bd8ad061283a5f5633b","modified":1594149058042},{"_id":"public/2020/01/14/MongoDB-Mongoose-minimal-offset-based-pagination/index.html","hash":"94ce25e3e01603e1262512251cd9501ffe017cc4","modified":1594149058042},{"_id":"public/2020/01/02/Building-URLFY-The-idea/index.html","hash":"0455709fd0a971fc457b3ce1aa62fcadc7ee617e","modified":1594149058042},{"_id":"public/2019/12/22/Executing-concurrent-HTTP-requests/index.html","hash":"3ef330462e799c66a78e8a4458bc6f0ab285a01b","modified":1594149058042},{"_id":"public/archives/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/page/2/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2019/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2019/12/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2020/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2020/01/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2020/02/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/archives/2020/07/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/page/2/index.html","hash":"537ff05618e6e2edba5d80e76eb117a48b92f575","modified":1594149058042},{"_id":"public/img/favicon.png","hash":"24a69506b188a8519fb758abb3cc7a653afcb021","modified":1594149058042},{"_id":"public/img/firminochangani.png","hash":"8dff31c410dcc6ffcb483092fd7d1bc656115fae","modified":1594149058042},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1594149058042},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1594149058042},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1594149058042},{"_id":"public/blog-images/some-views-on-generic-functions-typescript.jpg","hash":"16a31a001926e29cff4e85ed9bbb43d691d370db","modified":1594149058042},{"_id":"public/blog-images/accessing-filters.jpg","hash":"fc8c94d8d6cca63709312106b4bc697877823186","modified":1594149058042},{"_id":"public/blog-images/comparing-objectids.jpg","hash":"6cb2c590d72061b5c864ccc5dfc433e5df59ac20","modified":1594149058042},{"_id":"public/blog-images/concurrent.gif","hash":"e3858c8db8c29eb9ac35a535a9f3230cc29d95ac","modified":1594149058042},{"_id":"public/blog-images/import-svelte-components-with-an-alias.jpg","hash":"69fd987e2b146595216fdb3cdc60015ea5f6dd4e","modified":1594149058042},{"_id":"public/blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg","hash":"a056bd910abc783563424080014918bd521047ff","modified":1594149058042},{"_id":"public/img/me-2018.jpg","hash":"79b37a4f30dc483f7f381382cda4edc1b0606385","modified":1594149058042},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1594149058042},{"_id":"public/js/script.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594149058042},{"_id":"public/css/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1594149058042},{"_id":"public/css/main.css","hash":"9411fc1d173ae828ed7dcca91fe0873b2ce570c9","modified":1594149058042},{"_id":"public/js/highlight.pack.js","hash":"364fff02e62878ff62d1ab15ed167d79f724a69a","modified":1594149058042},{"_id":"public/blog-images/searching-inside-of-an-array-of-objects.jpg","hash":"8b04f5b19cbf1e152d4ebc3a997345d38ab5d832","modified":1594149058042},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1594149058042},{"_id":"public/blog-images/non-concurrent.gif","hash":"2eaabdc42285d206316253a093efcf9afb0ce3dc","modified":1594149058042},{"_id":"public/blog-images/sequelize-and-uuid-as-primary-key.jpg","hash":"276e198acb098b003a3731e918584eca269def71","modified":1594149058042},{"_id":"public/blog-images/urlfy.xyz.png","hash":"24195ec06229d3d9bc3a0ec3739e55dda7bbc03a","modified":1594149058042},{"_id":"public/blog-images/using-sass-variables-inside-vue-components.png","hash":"8a2c50acc56d2974cb376a1505c1fa1922463907","modified":1594149058042},{"_id":"public/blog-images/Executing-concurrent-HTTP-requests.png","hash":"aa9bd5c790d567d9ccd9fe07f9c624c463246ee7","modified":1594149058042},{"_id":"public/img/me-2020.png","hash":"46768b3f9eb738a6e36c18f28ead8f44a8590e56","modified":1594149058042},{"_id":"public/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","hash":"4198bc511091ff3eac6dc5cad9d87d45fda7f1ae","modified":1594149058042}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Accessing vue global filters inside component methods and lifecycle hooks","date":"2020-02-02T15:03:19.000Z","metatags":"vuejs","description":"Learn how to use this.$options.filters to access global filters inside component methods.","cover":"blog-images/accessing-filters.jpg","_content":"\nI've written this article before, but unfortunately, it got lost on one of my million blogs. \n\nFilters are one of my favorite features from Vuejs, they are easy to implement and are pretty handy to manipulate or format text inside the template tags. \n\nIf you are not familiar with Filters in Vuejs, here is a more formal concept:\n\n>Vue.js allows you to define filters that can be used to apply common text formatting.\n\n**Example:** Filter to formate a number to USD.\n\n```html\n<div class=\"product\">\n  <span class=\"product__price\">{{ price | formatPriceToMoney }}</span>\n</div>\n```\n\n<br />\n\n```javascript\nnew Vue({\n  el: \"#app\",\n  filters: {\n    formatPriceToMoney(value) {\n      if (value) {\n        return value.toLocaleString(\"en-US\", { currency: \"USD\" });\n      } else {\n        return 0.0;\n      }\n    }\n  }\n});\n```\n\n## Filters scope\n\n**Local filters (component)** are defined inside components, within the property `filters` inside the component declaration, as shown in the example above. \n\n**Global filters** are defined directly from the `Vue` insctance object, by calling the method `.filter(filterName, filterHandler(value) => value)`:\n\n```javascript\nimport Vue from \"vue\";\n\nVue.filter(\"formatePriceToMoney\", value => {\n  return value.toLocaleString(\"en-US\", { currency: \"USD\" });\n});\n```\n\nGlobal filters give you the advantage of reusing it across components, without having to worry about reimplementing its logic again, this means that the filter defined above can be used inside any component since it was directly implemented inside the main vue instance.\n\n\n\n## Calling a global filter inside of component method or hook lifecycle hook\n\nAs seen above, you can reuse any global filter across any component template, but what if you need to format data inside methods or lifecycle hooks with some logic that you've already implemented as a filter?\n\nBefore you ask yourself, why would I need that, here are some reasons:\n\n* When you need to pass formatted data to a third party component.\n* When you need to pass formatted data to a presentational component.\n\n  \nYou can perform such action by calling the filter as if it was a method using the `this.$options.filters` property. \n\n**Example:** Fomating an array of numbers using `.map()` function and `this.$options.filters`\n\n```html\n<script>\n  export default {\n    name: \"ListCars\",\n    data() {\n      return {\n        prices: [1200, 5400, 12.2, 0.9]\n      }\n    },\n    methods: {\n      getPricesFormated() {\n        return this.prices.map(price => {\n          return this\n            .$options\n            .filters\n            .formatePriceToMoney(price);\n        });\n      }\n    },\n    created(){\n      // Access filter inside of a lifecycle hook\n      console.log(this.$options.filters.formatePriceToMoney(5000));\n    }\n  }\n</script>\n```\n\n## References\n\n* [Filters](https://vuejs.org/v2/guide/filters.html)\n* [Cover by Tyler Nix](https://unsplash.com/@jtylernix)\n","source":"_posts/Accessing-vue-global-filters-inside-component-methods-and-lifecycle-hooks.md","raw":"---\ntitle: Accessing vue global filters inside component methods and lifecycle hooks\ndate: 2020-02-02 15:03:19\nmetatags: vuejs\ndescription: Learn how to use this.$options.filters to access global filters inside component methods. \ncover: \"blog-images/accessing-filters.jpg\"\n---\n\nI've written this article before, but unfortunately, it got lost on one of my million blogs. \n\nFilters are one of my favorite features from Vuejs, they are easy to implement and are pretty handy to manipulate or format text inside the template tags. \n\nIf you are not familiar with Filters in Vuejs, here is a more formal concept:\n\n>Vue.js allows you to define filters that can be used to apply common text formatting.\n\n**Example:** Filter to formate a number to USD.\n\n```html\n<div class=\"product\">\n  <span class=\"product__price\">{{ price | formatPriceToMoney }}</span>\n</div>\n```\n\n<br />\n\n```javascript\nnew Vue({\n  el: \"#app\",\n  filters: {\n    formatPriceToMoney(value) {\n      if (value) {\n        return value.toLocaleString(\"en-US\", { currency: \"USD\" });\n      } else {\n        return 0.0;\n      }\n    }\n  }\n});\n```\n\n## Filters scope\n\n**Local filters (component)** are defined inside components, within the property `filters` inside the component declaration, as shown in the example above. \n\n**Global filters** are defined directly from the `Vue` insctance object, by calling the method `.filter(filterName, filterHandler(value) => value)`:\n\n```javascript\nimport Vue from \"vue\";\n\nVue.filter(\"formatePriceToMoney\", value => {\n  return value.toLocaleString(\"en-US\", { currency: \"USD\" });\n});\n```\n\nGlobal filters give you the advantage of reusing it across components, without having to worry about reimplementing its logic again, this means that the filter defined above can be used inside any component since it was directly implemented inside the main vue instance.\n\n\n\n## Calling a global filter inside of component method or hook lifecycle hook\n\nAs seen above, you can reuse any global filter across any component template, but what if you need to format data inside methods or lifecycle hooks with some logic that you've already implemented as a filter?\n\nBefore you ask yourself, why would I need that, here are some reasons:\n\n* When you need to pass formatted data to a third party component.\n* When you need to pass formatted data to a presentational component.\n\n  \nYou can perform such action by calling the filter as if it was a method using the `this.$options.filters` property. \n\n**Example:** Fomating an array of numbers using `.map()` function and `this.$options.filters`\n\n```html\n<script>\n  export default {\n    name: \"ListCars\",\n    data() {\n      return {\n        prices: [1200, 5400, 12.2, 0.9]\n      }\n    },\n    methods: {\n      getPricesFormated() {\n        return this.prices.map(price => {\n          return this\n            .$options\n            .filters\n            .formatePriceToMoney(price);\n        });\n      }\n    },\n    created(){\n      // Access filter inside of a lifecycle hook\n      console.log(this.$options.filters.formatePriceToMoney(5000));\n    }\n  }\n</script>\n```\n\n## References\n\n* [Filters](https://vuejs.org/v2/guide/filters.html)\n* [Cover by Tyler Nix](https://unsplash.com/@jtylernix)\n","slug":"Accessing-vue-global-filters-inside-component-methods-and-lifecycle-hooks","published":1,"updated":"2020-06-28T15:22:56.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51a0000u5yy7swf10zd","content":"<p>I’ve written this article before, but unfortunately, it got lost on one of my million blogs. </p>\n<p>Filters are one of my favorite features from Vuejs, they are easy to implement and are pretty handy to manipulate or format text inside the template tags. </p>\n<p>If you are not familiar with Filters in Vuejs, here is a more formal concept:</p>\n<blockquote>\n<p>Vue.js allows you to define filters that can be used to apply common text formatting.</p>\n</blockquote>\n<p><strong>Example:</strong> Filter to formate a number to USD.</p>\n<pre><code class=\"html\">&lt;div class=&quot;product&quot;&gt;\n  &lt;span class=&quot;product__price&quot;&gt;{{ price | formatPriceToMoney }}&lt;/span&gt;\n&lt;/div&gt;</code></pre>\n<br />\n\n<pre><code class=\"javascript\">new Vue({\n  el: &quot;#app&quot;,\n  filters: {\n    formatPriceToMoney(value) {\n      if (value) {\n        return value.toLocaleString(&quot;en-US&quot;, { currency: &quot;USD&quot; });\n      } else {\n        return 0.0;\n      }\n    }\n  }\n});</code></pre>\n<h2 id=\"Filters-scope\"><a href=\"#Filters-scope\" class=\"headerlink\" title=\"Filters scope\"></a>Filters scope</h2><p><strong>Local filters (component)</strong> are defined inside components, within the property <code>filters</code> inside the component declaration, as shown in the example above. </p>\n<p><strong>Global filters</strong> are defined directly from the <code>Vue</code> insctance object, by calling the method <code>.filter(filterName, filterHandler(value) =&gt; value)</code>:</p>\n<pre><code class=\"javascript\">import Vue from &quot;vue&quot;;\n\nVue.filter(&quot;formatePriceToMoney&quot;, value =&gt; {\n  return value.toLocaleString(&quot;en-US&quot;, { currency: &quot;USD&quot; });\n});</code></pre>\n<p>Global filters give you the advantage of reusing it across components, without having to worry about reimplementing its logic again, this means that the filter defined above can be used inside any component since it was directly implemented inside the main vue instance.</p>\n<h2 id=\"Calling-a-global-filter-inside-of-component-method-or-hook-lifecycle-hook\"><a href=\"#Calling-a-global-filter-inside-of-component-method-or-hook-lifecycle-hook\" class=\"headerlink\" title=\"Calling a global filter inside of component method or hook lifecycle hook\"></a>Calling a global filter inside of component method or hook lifecycle hook</h2><p>As seen above, you can reuse any global filter across any component template, but what if you need to format data inside methods or lifecycle hooks with some logic that you’ve already implemented as a filter?</p>\n<p>Before you ask yourself, why would I need that, here are some reasons:</p>\n<ul>\n<li>When you need to pass formatted data to a third party component.</li>\n<li>When you need to pass formatted data to a presentational component.</li>\n</ul>\n<p>You can perform such action by calling the filter as if it was a method using the <code>this.$options.filters</code> property. </p>\n<p><strong>Example:</strong> Fomating an array of numbers using <code>.map()</code> function and <code>this.$options.filters</code></p>\n<pre><code class=\"html\">&lt;script&gt;\n  export default {\n    name: &quot;ListCars&quot;,\n    data() {\n      return {\n        prices: [1200, 5400, 12.2, 0.9]\n      }\n    },\n    methods: {\n      getPricesFormated() {\n        return this.prices.map(price =&gt; {\n          return this\n            .$options\n            .filters\n            .formatePriceToMoney(price);\n        });\n      }\n    },\n    created(){\n      // Access filter inside of a lifecycle hook\n      console.log(this.$options.filters.formatePriceToMoney(5000));\n    }\n  }\n&lt;/script&gt;</code></pre>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://vuejs.org/v2/guide/filters.html\" target=\"_blank\" rel=\"noopener\">Filters</a></li>\n<li><a href=\"https://unsplash.com/@jtylernix\" target=\"_blank\" rel=\"noopener\">Cover by Tyler Nix</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve written this article before, but unfortunately, it got lost on one of my million blogs. </p>\n<p>Filters are one of my favorite features from Vuejs, they are easy to implement and are pretty handy to manipulate or format text inside the template tags. </p>\n<p>If you are not familiar with Filters in Vuejs, here is a more formal concept:</p>\n<blockquote>\n<p>Vue.js allows you to define filters that can be used to apply common text formatting.</p>\n</blockquote>\n<p><strong>Example:</strong> Filter to formate a number to USD.</p>\n<pre><code class=\"html\">&lt;div class=&quot;product&quot;&gt;\n  &lt;span class=&quot;product__price&quot;&gt;{{ price | formatPriceToMoney }}&lt;/span&gt;\n&lt;/div&gt;</code></pre>\n<br />\n\n<pre><code class=\"javascript\">new Vue({\n  el: &quot;#app&quot;,\n  filters: {\n    formatPriceToMoney(value) {\n      if (value) {\n        return value.toLocaleString(&quot;en-US&quot;, { currency: &quot;USD&quot; });\n      } else {\n        return 0.0;\n      }\n    }\n  }\n});</code></pre>\n<h2 id=\"Filters-scope\"><a href=\"#Filters-scope\" class=\"headerlink\" title=\"Filters scope\"></a>Filters scope</h2><p><strong>Local filters (component)</strong> are defined inside components, within the property <code>filters</code> inside the component declaration, as shown in the example above. </p>\n<p><strong>Global filters</strong> are defined directly from the <code>Vue</code> insctance object, by calling the method <code>.filter(filterName, filterHandler(value) =&gt; value)</code>:</p>\n<pre><code class=\"javascript\">import Vue from &quot;vue&quot;;\n\nVue.filter(&quot;formatePriceToMoney&quot;, value =&gt; {\n  return value.toLocaleString(&quot;en-US&quot;, { currency: &quot;USD&quot; });\n});</code></pre>\n<p>Global filters give you the advantage of reusing it across components, without having to worry about reimplementing its logic again, this means that the filter defined above can be used inside any component since it was directly implemented inside the main vue instance.</p>\n<h2 id=\"Calling-a-global-filter-inside-of-component-method-or-hook-lifecycle-hook\"><a href=\"#Calling-a-global-filter-inside-of-component-method-or-hook-lifecycle-hook\" class=\"headerlink\" title=\"Calling a global filter inside of component method or hook lifecycle hook\"></a>Calling a global filter inside of component method or hook lifecycle hook</h2><p>As seen above, you can reuse any global filter across any component template, but what if you need to format data inside methods or lifecycle hooks with some logic that you’ve already implemented as a filter?</p>\n<p>Before you ask yourself, why would I need that, here are some reasons:</p>\n<ul>\n<li>When you need to pass formatted data to a third party component.</li>\n<li>When you need to pass formatted data to a presentational component.</li>\n</ul>\n<p>You can perform such action by calling the filter as if it was a method using the <code>this.$options.filters</code> property. </p>\n<p><strong>Example:</strong> Fomating an array of numbers using <code>.map()</code> function and <code>this.$options.filters</code></p>\n<pre><code class=\"html\">&lt;script&gt;\n  export default {\n    name: &quot;ListCars&quot;,\n    data() {\n      return {\n        prices: [1200, 5400, 12.2, 0.9]\n      }\n    },\n    methods: {\n      getPricesFormated() {\n        return this.prices.map(price =&gt; {\n          return this\n            .$options\n            .filters\n            .formatePriceToMoney(price);\n        });\n      }\n    },\n    created(){\n      // Access filter inside of a lifecycle hook\n      console.log(this.$options.filters.formatePriceToMoney(5000));\n    }\n  }\n&lt;/script&gt;</code></pre>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://vuejs.org/v2/guide/filters.html\" target=\"_blank\" rel=\"noopener\">Filters</a></li>\n<li><a href=\"https://unsplash.com/@jtylernix\" target=\"_blank\" rel=\"noopener\">Cover by Tyler Nix</a></li>\n</ul>\n"},{"title":"Building URLFY - The idea","date":"2020-01-02T12:21:08.000Z","metatags":"urlfy, shortening, idea, projects","description":"On this blog post I explain how I came out with the idea of building a shortening service","cover":"blog-images/urlfy.xyz.png","_content":"\nI was studying system design during the Christmas holidays of 2019, and while reading a blog [post](https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444), I found a challenge that quickly caught my attention: \n\n>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?\n\nThat sounded like a very simple web application, but then, in the same blog post, a few questions where also made:\n\n>How to generate a unique ID for each URL?\n>How would you generate unique IDs at scale (thousands of URL shortening >requests coming every second)?\n>How would your service handle redirects?\n>How would you support custom short URLs?\n>How to delete expired URLs etc?\n>How to track click stats?\n\nAfter reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.\n\n![Urlfy](/blog/blog-images/urlfy.xyz.png)\n\nLong story short, I ended building something which a call [Ulrfy.xyz](https://app.urlfy.xyz), a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello [board](https://trello.com/b/YZDrArI2/urlfyxyz) where I manage my backlog is open for the public.\n\nThis was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.","source":"_posts/Building-URLFY-The-idea.md","raw":"---\ntitle: Building URLFY - The idea\ndate: 2020-01-02 12:21:08\nmetatags: urlfy, shortening, idea, projects\ndescription: On this blog post I explain how I came out with the idea of building a shortening service\ncover: \"blog-images/urlfy.xyz.png\"\n---\n\nI was studying system design during the Christmas holidays of 2019, and while reading a blog [post](https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444), I found a challenge that quickly caught my attention: \n\n>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?\n\nThat sounded like a very simple web application, but then, in the same blog post, a few questions where also made:\n\n>How to generate a unique ID for each URL?\n>How would you generate unique IDs at scale (thousands of URL shortening >requests coming every second)?\n>How would your service handle redirects?\n>How would you support custom short URLs?\n>How to delete expired URLs etc?\n>How to track click stats?\n\nAfter reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.\n\n![Urlfy](/blog/blog-images/urlfy.xyz.png)\n\nLong story short, I ended building something which a call [Ulrfy.xyz](https://app.urlfy.xyz), a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello [board](https://trello.com/b/YZDrArI2/urlfyxyz) where I manage my backlog is open for the public.\n\nThis was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.","slug":"Building-URLFY-The-idea","published":1,"updated":"2020-06-28T15:22:56.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51e0001u5yy4lal7eme","content":"<p>I was studying system design during the Christmas holidays of 2019, and while reading a blog <a href=\"https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444\" target=\"_blank\" rel=\"noopener\">post</a>, I found a challenge that quickly caught my attention: </p>\n<blockquote>\n<p>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?</p>\n</blockquote>\n<p>That sounded like a very simple web application, but then, in the same blog post, a few questions where also made:</p>\n<blockquote>\n<p>How to generate a unique ID for each URL?<br>How would you generate unique IDs at scale (thousands of URL shortening &gt;requests coming every second)?<br>How would your service handle redirects?<br>How would you support custom short URLs?<br>How to delete expired URLs etc?<br>How to track click stats?</p>\n</blockquote>\n<p>After reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.</p>\n<p><img src=\"/blog/blog-images/urlfy.xyz.png\" alt=\"Urlfy\"></p>\n<p>Long story short, I ended building something which a call <a href=\"https://app.urlfy.xyz\" target=\"_blank\" rel=\"noopener\">Ulrfy.xyz</a>, a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello <a href=\"https://trello.com/b/YZDrArI2/urlfyxyz\" target=\"_blank\" rel=\"noopener\">board</a> where I manage my backlog is open for the public.</p>\n<p>This was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I was studying system design during the Christmas holidays of 2019, and while reading a blog <a href=\"https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444\" target=\"_blank\" rel=\"noopener\">post</a>, I found a challenge that quickly caught my attention: </p>\n<blockquote>\n<p>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?</p>\n</blockquote>\n<p>That sounded like a very simple web application, but then, in the same blog post, a few questions where also made:</p>\n<blockquote>\n<p>How to generate a unique ID for each URL?<br>How would you generate unique IDs at scale (thousands of URL shortening &gt;requests coming every second)?<br>How would your service handle redirects?<br>How would you support custom short URLs?<br>How to delete expired URLs etc?<br>How to track click stats?</p>\n</blockquote>\n<p>After reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.</p>\n<p><img src=\"/blog/blog-images/urlfy.xyz.png\" alt=\"Urlfy\"></p>\n<p>Long story short, I ended building something which a call <a href=\"https://app.urlfy.xyz\" target=\"_blank\" rel=\"noopener\">Ulrfy.xyz</a>, a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello <a href=\"https://trello.com/b/YZDrArI2/urlfyxyz\" target=\"_blank\" rel=\"noopener\">board</a> where I manage my backlog is open for the public.</p>\n<p>This was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.</p>\n"},{"title":"CSS: links with sliding underline effect through pseudo-elements","date":"2020-02-06T23:58:27.000Z","metatags":"css","description":"In this tutorial, I show a technique to replace the default underline effect using pseud-elements.","cover":"blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg","_content":"\nWhen building my [blog](https://changani.me), I decided to get rid of the default underline styling on `<a>` elements to use my custom underline effect. If you still don't know what kind of style I am talking about, just try to hover this [link](https://changani.me) or any other link in the blog post content.\n\n> Check the final result [here](https://codepen.io/firminochangani/pen/mdJdKGY)\n\nAs you could see, when you hover a link in the content, two lines under the text start growing from left to right and from right to left with a slightly sliding effect. I did this with pseudo elements, and bellow I will show you can implement a similar effect on your website or web application.\n\n## The a element\n\nOur first target is the `<a>` element, which comes with default CSS properties that we need to restart first, like color and the most important one, text-decoration:\n\n```css\na {\n  color: #0099CC;\n  position: relative;\n  text-decoration: none;\n}\n```\n\n*  The`color` property was set to some variation of blue\n* The `position` property was set to `relative`. Below, I will explain why.\n* The `text-decoration` was set to `none`. This is the property that will style the `<a>` element with the line under the text.\n\n## Adding the pseudo-elements\n\n```css\na::before,\na::after {\n  bottom: 0;\n  width: 0%;\n  content: \"\";\n  height: 2px;\n  position: absolute;\n  transition: width .5s;\n  background-color: #0099CC;\n}\n\na::before {\n  left: 0;\n}\n\na::after {\n  right: 0;\n}\n```\n\nThe two lines that form the `underline` effect in the final result that we intend to achieve are in fact pseudo-elements attacthed to the `<a>` element. \n\nIn the code above, the first block describes the common CSS definitions between `::before` and `::after`: \n\n* `bottom` is set to `0` because I want the underline to actually appear under the text, in this case, the `<a>` element.\n* `width` is initially set to `0`, it means that you won't be able to see anything until the mouse is over the text. The `:hover` selector is not defined yet.\n* `content` is a property required for the pseudo-elements. In this case, I set it to an empty string.\n* The value of `height` can be arbitrary. However, you may want to define a value that visually will match the `<a>` element font-size.\n* The `position` was set to `absolute` so we are able to manipulate the `left`, `right` and `bottom` properties, in order to align both pseudo-elements relative to the `<a>` element.\n* To give the sliding effect I defined the `transition` property relative to the `width` property with a duration of `0.5` seconds.\n* And of course the `background-color`. This can be anything you feel comfortable with.\n\n\n\nThen in the code above, there are two more blocks, and they were defined so each pseudo-element could be aligned in the left and right side of the `<a>` tag.\n\n\n\n## Handling on mouse hover\n\nAt this point, you should not see any effect yet, and that's because both pseudo-elements were defined with the `width` property set to `0`. This makes sense because the desired effect is that the underline only appears when the mouse is on top of the link. \n\n```css\na:hover::before,\na:hover::after {\n   width: 50%;\n}\n```\n\nIn the code above I am saying this: each time the mouse hovers an element, the `::before` and `::after` pseudo-elements should have its `width` value set to `50%`. *Voilà*, you should be able to see the underline effect I described at the beginning of this article.\n\nYou can see the final result [here](https://codepen.io/firminochangani/pen/mdJdKGY) too.\n\n## References\n\n[Post cover by Keith Johnson](https://unsplash.com/photos/iCmw64XrJFI)","source":"_posts/CSS-links-with-sliding-underline-effect-through-pseudo-elements.md","raw":"---\ntitle: 'CSS: links with sliding underline effect through pseudo-elements'\ndate: 2020-02-06 23:58:27\nmetatags: css\ndescription: In this tutorial, I show a technique to replace the default underline effect using pseud-elements.\ncover: \"blog-images/css-links-with-sliding-underline-effect-through-pseudo-elements.jpg\"\n---\n\nWhen building my [blog](https://changani.me), I decided to get rid of the default underline styling on `<a>` elements to use my custom underline effect. If you still don't know what kind of style I am talking about, just try to hover this [link](https://changani.me) or any other link in the blog post content.\n\n> Check the final result [here](https://codepen.io/firminochangani/pen/mdJdKGY)\n\nAs you could see, when you hover a link in the content, two lines under the text start growing from left to right and from right to left with a slightly sliding effect. I did this with pseudo elements, and bellow I will show you can implement a similar effect on your website or web application.\n\n## The a element\n\nOur first target is the `<a>` element, which comes with default CSS properties that we need to restart first, like color and the most important one, text-decoration:\n\n```css\na {\n  color: #0099CC;\n  position: relative;\n  text-decoration: none;\n}\n```\n\n*  The`color` property was set to some variation of blue\n* The `position` property was set to `relative`. Below, I will explain why.\n* The `text-decoration` was set to `none`. This is the property that will style the `<a>` element with the line under the text.\n\n## Adding the pseudo-elements\n\n```css\na::before,\na::after {\n  bottom: 0;\n  width: 0%;\n  content: \"\";\n  height: 2px;\n  position: absolute;\n  transition: width .5s;\n  background-color: #0099CC;\n}\n\na::before {\n  left: 0;\n}\n\na::after {\n  right: 0;\n}\n```\n\nThe two lines that form the `underline` effect in the final result that we intend to achieve are in fact pseudo-elements attacthed to the `<a>` element. \n\nIn the code above, the first block describes the common CSS definitions between `::before` and `::after`: \n\n* `bottom` is set to `0` because I want the underline to actually appear under the text, in this case, the `<a>` element.\n* `width` is initially set to `0`, it means that you won't be able to see anything until the mouse is over the text. The `:hover` selector is not defined yet.\n* `content` is a property required for the pseudo-elements. In this case, I set it to an empty string.\n* The value of `height` can be arbitrary. However, you may want to define a value that visually will match the `<a>` element font-size.\n* The `position` was set to `absolute` so we are able to manipulate the `left`, `right` and `bottom` properties, in order to align both pseudo-elements relative to the `<a>` element.\n* To give the sliding effect I defined the `transition` property relative to the `width` property with a duration of `0.5` seconds.\n* And of course the `background-color`. This can be anything you feel comfortable with.\n\n\n\nThen in the code above, there are two more blocks, and they were defined so each pseudo-element could be aligned in the left and right side of the `<a>` tag.\n\n\n\n## Handling on mouse hover\n\nAt this point, you should not see any effect yet, and that's because both pseudo-elements were defined with the `width` property set to `0`. This makes sense because the desired effect is that the underline only appears when the mouse is on top of the link. \n\n```css\na:hover::before,\na:hover::after {\n   width: 50%;\n}\n```\n\nIn the code above I am saying this: each time the mouse hovers an element, the `::before` and `::after` pseudo-elements should have its `width` value set to `50%`. *Voilà*, you should be able to see the underline effect I described at the beginning of this article.\n\nYou can see the final result [here](https://codepen.io/firminochangani/pen/mdJdKGY) too.\n\n## References\n\n[Post cover by Keith Johnson](https://unsplash.com/photos/iCmw64XrJFI)","slug":"CSS-links-with-sliding-underline-effect-through-pseudo-elements","published":1,"updated":"2020-06-28T15:22:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51g0002u5yy15hi6m7c","content":"<p>When building my <a href=\"https://changani.me\" target=\"_blank\" rel=\"noopener\">blog</a>, I decided to get rid of the default underline styling on <code>&lt;a&gt;</code> elements to use my custom underline effect. If you still don’t know what kind of style I am talking about, just try to hover this <a href=\"https://changani.me\" target=\"_blank\" rel=\"noopener\">link</a> or any other link in the blog post content.</p>\n<blockquote>\n<p>Check the final result <a href=\"https://codepen.io/firminochangani/pen/mdJdKGY\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</blockquote>\n<p>As you could see, when you hover a link in the content, two lines under the text start growing from left to right and from right to left with a slightly sliding effect. I did this with pseudo elements, and bellow I will show you can implement a similar effect on your website or web application.</p>\n<h2 id=\"The-a-element\"><a href=\"#The-a-element\" class=\"headerlink\" title=\"The a element\"></a>The a element</h2><p>Our first target is the <code>&lt;a&gt;</code> element, which comes with default CSS properties that we need to restart first, like color and the most important one, text-decoration:</p>\n<pre><code class=\"css\">a {\n  color: #0099CC;\n  position: relative;\n  text-decoration: none;\n}</code></pre>\n<ul>\n<li>The<code>color</code> property was set to some variation of blue</li>\n<li>The <code>position</code> property was set to <code>relative</code>. Below, I will explain why.</li>\n<li>The <code>text-decoration</code> was set to <code>none</code>. This is the property that will style the <code>&lt;a&gt;</code> element with the line under the text.</li>\n</ul>\n<h2 id=\"Adding-the-pseudo-elements\"><a href=\"#Adding-the-pseudo-elements\" class=\"headerlink\" title=\"Adding the pseudo-elements\"></a>Adding the pseudo-elements</h2><pre><code class=\"css\">a::before,\na::after {\n  bottom: 0;\n  width: 0%;\n  content: &quot;&quot;;\n  height: 2px;\n  position: absolute;\n  transition: width .5s;\n  background-color: #0099CC;\n}\n\na::before {\n  left: 0;\n}\n\na::after {\n  right: 0;\n}</code></pre>\n<p>The two lines that form the <code>underline</code> effect in the final result that we intend to achieve are in fact pseudo-elements attacthed to the <code>&lt;a&gt;</code> element. </p>\n<p>In the code above, the first block describes the common CSS definitions between <code>::before</code> and <code>::after</code>: </p>\n<ul>\n<li><code>bottom</code> is set to <code>0</code> because I want the underline to actually appear under the text, in this case, the <code>&lt;a&gt;</code> element.</li>\n<li><code>width</code> is initially set to <code>0</code>, it means that you won’t be able to see anything until the mouse is over the text. The <code>:hover</code> selector is not defined yet.</li>\n<li><code>content</code> is a property required for the pseudo-elements. In this case, I set it to an empty string.</li>\n<li>The value of <code>height</code> can be arbitrary. However, you may want to define a value that visually will match the <code>&lt;a&gt;</code> element font-size.</li>\n<li>The <code>position</code> was set to <code>absolute</code> so we are able to manipulate the <code>left</code>, <code>right</code> and <code>bottom</code> properties, in order to align both pseudo-elements relative to the <code>&lt;a&gt;</code> element.</li>\n<li>To give the sliding effect I defined the <code>transition</code> property relative to the <code>width</code> property with a duration of <code>0.5</code> seconds.</li>\n<li>And of course the <code>background-color</code>. This can be anything you feel comfortable with.</li>\n</ul>\n<p>Then in the code above, there are two more blocks, and they were defined so each pseudo-element could be aligned in the left and right side of the <code>&lt;a&gt;</code> tag.</p>\n<h2 id=\"Handling-on-mouse-hover\"><a href=\"#Handling-on-mouse-hover\" class=\"headerlink\" title=\"Handling on mouse hover\"></a>Handling on mouse hover</h2><p>At this point, you should not see any effect yet, and that’s because both pseudo-elements were defined with the <code>width</code> property set to <code>0</code>. This makes sense because the desired effect is that the underline only appears when the mouse is on top of the link. </p>\n<pre><code class=\"css\">a:hover::before,\na:hover::after {\n   width: 50%;\n}</code></pre>\n<p>In the code above I am saying this: each time the mouse hovers an element, the <code>::before</code> and <code>::after</code> pseudo-elements should have its <code>width</code> value set to <code>50%</code>. <em>Voilà</em>, you should be able to see the underline effect I described at the beginning of this article.</p>\n<p>You can see the final result <a href=\"https://codepen.io/firminochangani/pen/mdJdKGY\" target=\"_blank\" rel=\"noopener\">here</a> too.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://unsplash.com/photos/iCmw64XrJFI\" target=\"_blank\" rel=\"noopener\">Post cover by Keith Johnson</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>When building my <a href=\"https://changani.me\" target=\"_blank\" rel=\"noopener\">blog</a>, I decided to get rid of the default underline styling on <code>&lt;a&gt;</code> elements to use my custom underline effect. If you still don’t know what kind of style I am talking about, just try to hover this <a href=\"https://changani.me\" target=\"_blank\" rel=\"noopener\">link</a> or any other link in the blog post content.</p>\n<blockquote>\n<p>Check the final result <a href=\"https://codepen.io/firminochangani/pen/mdJdKGY\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</blockquote>\n<p>As you could see, when you hover a link in the content, two lines under the text start growing from left to right and from right to left with a slightly sliding effect. I did this with pseudo elements, and bellow I will show you can implement a similar effect on your website or web application.</p>\n<h2 id=\"The-a-element\"><a href=\"#The-a-element\" class=\"headerlink\" title=\"The a element\"></a>The a element</h2><p>Our first target is the <code>&lt;a&gt;</code> element, which comes with default CSS properties that we need to restart first, like color and the most important one, text-decoration:</p>\n<pre><code class=\"css\">a {\n  color: #0099CC;\n  position: relative;\n  text-decoration: none;\n}</code></pre>\n<ul>\n<li>The<code>color</code> property was set to some variation of blue</li>\n<li>The <code>position</code> property was set to <code>relative</code>. Below, I will explain why.</li>\n<li>The <code>text-decoration</code> was set to <code>none</code>. This is the property that will style the <code>&lt;a&gt;</code> element with the line under the text.</li>\n</ul>\n<h2 id=\"Adding-the-pseudo-elements\"><a href=\"#Adding-the-pseudo-elements\" class=\"headerlink\" title=\"Adding the pseudo-elements\"></a>Adding the pseudo-elements</h2><pre><code class=\"css\">a::before,\na::after {\n  bottom: 0;\n  width: 0%;\n  content: &quot;&quot;;\n  height: 2px;\n  position: absolute;\n  transition: width .5s;\n  background-color: #0099CC;\n}\n\na::before {\n  left: 0;\n}\n\na::after {\n  right: 0;\n}</code></pre>\n<p>The two lines that form the <code>underline</code> effect in the final result that we intend to achieve are in fact pseudo-elements attacthed to the <code>&lt;a&gt;</code> element. </p>\n<p>In the code above, the first block describes the common CSS definitions between <code>::before</code> and <code>::after</code>: </p>\n<ul>\n<li><code>bottom</code> is set to <code>0</code> because I want the underline to actually appear under the text, in this case, the <code>&lt;a&gt;</code> element.</li>\n<li><code>width</code> is initially set to <code>0</code>, it means that you won’t be able to see anything until the mouse is over the text. The <code>:hover</code> selector is not defined yet.</li>\n<li><code>content</code> is a property required for the pseudo-elements. In this case, I set it to an empty string.</li>\n<li>The value of <code>height</code> can be arbitrary. However, you may want to define a value that visually will match the <code>&lt;a&gt;</code> element font-size.</li>\n<li>The <code>position</code> was set to <code>absolute</code> so we are able to manipulate the <code>left</code>, <code>right</code> and <code>bottom</code> properties, in order to align both pseudo-elements relative to the <code>&lt;a&gt;</code> element.</li>\n<li>To give the sliding effect I defined the <code>transition</code> property relative to the <code>width</code> property with a duration of <code>0.5</code> seconds.</li>\n<li>And of course the <code>background-color</code>. This can be anything you feel comfortable with.</li>\n</ul>\n<p>Then in the code above, there are two more blocks, and they were defined so each pseudo-element could be aligned in the left and right side of the <code>&lt;a&gt;</code> tag.</p>\n<h2 id=\"Handling-on-mouse-hover\"><a href=\"#Handling-on-mouse-hover\" class=\"headerlink\" title=\"Handling on mouse hover\"></a>Handling on mouse hover</h2><p>At this point, you should not see any effect yet, and that’s because both pseudo-elements were defined with the <code>width</code> property set to <code>0</code>. This makes sense because the desired effect is that the underline only appears when the mouse is on top of the link. </p>\n<pre><code class=\"css\">a:hover::before,\na:hover::after {\n   width: 50%;\n}</code></pre>\n<p>In the code above I am saying this: each time the mouse hovers an element, the <code>::before</code> and <code>::after</code> pseudo-elements should have its <code>width</code> value set to <code>50%</code>. <em>Voilà</em>, you should be able to see the underline effect I described at the beginning of this article.</p>\n<p>You can see the final result <a href=\"https://codepen.io/firminochangani/pen/mdJdKGY\" target=\"_blank\" rel=\"noopener\">here</a> too.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://unsplash.com/photos/iCmw64XrJFI\" target=\"_blank\" rel=\"noopener\">Post cover by Keith Johnson</a></p>\n"},{"title":"Comparing MongoDB ObjectIds","date":"2020-01-27T13:15:53.000Z","metatags":"mongodb","description":"Understand what is an ObjectId and how you can compare two ObjectIds without unexpected behaviors.","cover":"blog-images/comparing-objectids.jpg","_content":"\nIn MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property `_id` of each document inside of a collection.\n\n> TL;DR\n>\n> ObjectIds can be effectively compared using the `ObjectId().equals()` method.\n\n**Here is an example**\n\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\nThe string `5e2ed1b83f98e15f9799bfd2` is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.\n\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n**What's happening in the code above?**\n\nTwo ids are being created with the same string that obeys the ObjectId format `5e2ed3bb8f6ee86b8d4d21b7`. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:\n\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\nAnd then, in the next line, when a comparison between the two ObjectId is made, the terminal prints `false`.\n\nIf you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an `Object`, despite the fact they print a string when logged.\n\n## The proper way to compare ObjectId's\n\nEach ObjectId object has a method called `.equals()`, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the `.equals()` has been called.\n\n**Example**\n\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n## References\n\n- [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/)\n- [Post cover by Trust \"Tru\" Katsande](https://unsplash.com/photos/xcneHTn8DUI)\n","source":"_posts/Comparing-MongoDB-ObjectIds.md","raw":"---\ntitle: Comparing MongoDB ObjectIds\ndate: 2020-01-27 13:15:53\nmetatags: mongodb\ndescription: Understand what is an ObjectId and how you can compare two ObjectIds without unexpected behaviors.\ncover: \"blog-images/comparing-objectids.jpg\"\n---\n\nIn MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property `_id` of each document inside of a collection.\n\n> TL;DR\n>\n> ObjectIds can be effectively compared using the `ObjectId().equals()` method.\n\n**Here is an example**\n\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\nThe string `5e2ed1b83f98e15f9799bfd2` is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.\n\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n**What's happening in the code above?**\n\nTwo ids are being created with the same string that obeys the ObjectId format `5e2ed3bb8f6ee86b8d4d21b7`. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:\n\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\nAnd then, in the next line, when a comparison between the two ObjectId is made, the terminal prints `false`.\n\nIf you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an `Object`, despite the fact they print a string when logged.\n\n## The proper way to compare ObjectId's\n\nEach ObjectId object has a method called `.equals()`, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the `.equals()` has been called.\n\n**Example**\n\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n## References\n\n- [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/)\n- [Post cover by Trust \"Tru\" Katsande](https://unsplash.com/photos/xcneHTn8DUI)\n","slug":"Comparing-MongoDB-ObjectIds","published":1,"updated":"2020-06-28T15:22:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51h0003u5yya1yu88m5","content":"<p>In MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property <code>_id</code> of each document inside of a collection.</p>\n<blockquote>\n<p>TL;DR</p>\n<p>ObjectIds can be effectively compared using the <code>ObjectId().equals()</code> method.</p>\n</blockquote>\n<p><strong>Here is an example</strong></p>\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\n<p>The string <code>5e2ed1b83f98e15f9799bfd2</code> is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.</p>\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n<p><strong>What’s happening in the code above?</strong></p>\n<p>Two ids are being created with the same string that obeys the ObjectId format <code>5e2ed3bb8f6ee86b8d4d21b7</code>. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:</p>\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\n<p>And then, in the next line, when a comparison between the two ObjectId is made, the terminal prints <code>false</code>.</p>\n<p>If you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an <code>Object</code>, despite the fact they print a string when logged.</p>\n<h2 id=\"The-proper-way-to-compare-ObjectId’s\"><a href=\"#The-proper-way-to-compare-ObjectId’s\" class=\"headerlink\" title=\"The proper way to compare ObjectId’s\"></a>The proper way to compare ObjectId’s</h2><p>Each ObjectId object has a method called <code>.equals()</code>, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the <code>.equals()</code> has been called.</p>\n<p><strong>Example</strong></p>\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.mongodb.com/manual/reference/method/ObjectId/\" target=\"_blank\" rel=\"noopener\">ObjectId</a></li>\n<li><a href=\"https://unsplash.com/photos/xcneHTn8DUI\" target=\"_blank\" rel=\"noopener\">Post cover by Trust “Tru” Katsande</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>In MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property <code>_id</code> of each document inside of a collection.</p>\n<blockquote>\n<p>TL;DR</p>\n<p>ObjectIds can be effectively compared using the <code>ObjectId().equals()</code> method.</p>\n</blockquote>\n<p><strong>Here is an example</strong></p>\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\n<p>The string <code>5e2ed1b83f98e15f9799bfd2</code> is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.</p>\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n<p><strong>What’s happening in the code above?</strong></p>\n<p>Two ids are being created with the same string that obeys the ObjectId format <code>5e2ed3bb8f6ee86b8d4d21b7</code>. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:</p>\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\n<p>And then, in the next line, when a comparison between the two ObjectId is made, the terminal prints <code>false</code>.</p>\n<p>If you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an <code>Object</code>, despite the fact they print a string when logged.</p>\n<h2 id=\"The-proper-way-to-compare-ObjectId’s\"><a href=\"#The-proper-way-to-compare-ObjectId’s\" class=\"headerlink\" title=\"The proper way to compare ObjectId’s\"></a>The proper way to compare ObjectId’s</h2><p>Each ObjectId object has a method called <code>.equals()</code>, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the <code>.equals()</code> has been called.</p>\n<p><strong>Example</strong></p>\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.mongodb.com/manual/reference/method/ObjectId/\" target=\"_blank\" rel=\"noopener\">ObjectId</a></li>\n<li><a href=\"https://unsplash.com/photos/xcneHTn8DUI\" target=\"_blank\" rel=\"noopener\">Post cover by Trust “Tru” Katsande</a></li>\n</ul>\n"},{"title":"Executing concurrent HTTP requests","date":"2019-12-22T21:09:57.000Z","metatags":"javascript, nodejs, asynchronous, programming, promises, concurrency","description":"Read more about executing concurrent HTTP requests using Promises and async/await.","cover":"blog-images/Executing-concurrent-HTTP-requests.png","_content":"\nWhat is concurrency anyway? You've probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:\n\n>In [computer science](https://en.wikipedia.org/wiki/Computer_science), **concurrency** is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.\n\n\nWith this in mind, let's go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.\n\n## Helper function\n\nIn the script below, I implement a small helper function that uses [axios](https://www.npmjs.com/package/axios) to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.\n\n\n\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n## Non-concurrent requests\n\nIn the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. \n\nThe get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the [hrtime()](https://nodejs.org/api/process.html#process_process_hrtime_time) method from the process package.\n\n\n\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\nDue to the get function being called straight with the [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.\n\n\n\n![Non concurrent](/blog/blog-images/non-concurrent.gif)\n\n\n\n## Concurrent requests\n\nSince none of the results depend on each other, we can simply execute all the requests at once. \n\nWith just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request's execution time from 10s to 3s.\n\nIn the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. \n\n\n\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\nIn the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.\n\n\n\n![Concurrent requests](/blog/blog-images/concurrent.gif)\n\n\n\nThe Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.\n\n \n\n## References\n\n* [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n* [Concurrency vs. Parallelism, Lokesh Gupta](https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/)\n* [Concurrency model and the event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop)","source":"_posts/Executing-concurrent-HTTP-requests.md","raw":"---\ntitle: Executing concurrent HTTP requests\ndate: 2019-12-22 21:09:57\nmetatags: javascript, nodejs, asynchronous, programming, promises, concurrency\ndescription: Read more about executing concurrent HTTP requests using Promises and async/await.\ncover: \"blog-images/Executing-concurrent-HTTP-requests.png\"\n---\n\nWhat is concurrency anyway? You've probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:\n\n>In [computer science](https://en.wikipedia.org/wiki/Computer_science), **concurrency** is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.\n\n\nWith this in mind, let's go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.\n\n## Helper function\n\nIn the script below, I implement a small helper function that uses [axios](https://www.npmjs.com/package/axios) to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.\n\n\n\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n## Non-concurrent requests\n\nIn the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. \n\nThe get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the [hrtime()](https://nodejs.org/api/process.html#process_process_hrtime_time) method from the process package.\n\n\n\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\nDue to the get function being called straight with the [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.\n\n\n\n![Non concurrent](/blog/blog-images/non-concurrent.gif)\n\n\n\n## Concurrent requests\n\nSince none of the results depend on each other, we can simply execute all the requests at once. \n\nWith just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request's execution time from 10s to 3s.\n\nIn the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. \n\n\n\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\nIn the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.\n\n\n\n![Concurrent requests](/blog/blog-images/concurrent.gif)\n\n\n\nThe Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.\n\n \n\n## References\n\n* [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n* [Concurrency vs. Parallelism, Lokesh Gupta](https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/)\n* [Concurrency model and the event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop)","slug":"Executing-concurrent-HTTP-requests","published":1,"updated":"2020-06-28T15:22:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51h0004u5yya12y9xh2","content":"<p>What is concurrency anyway? You’ve probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:</p>\n<blockquote>\n<p>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_blank\" rel=\"noopener\">computer science</a>, <strong>concurrency</strong> is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.</p>\n</blockquote>\n<p>With this in mind, let’s go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.</p>\n<h2 id=\"Helper-function\"><a href=\"#Helper-function\" class=\"headerlink\" title=\"Helper function\"></a>Helper function</h2><p>In the script below, I implement a small helper function that uses <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.</p>\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n<h2 id=\"Non-concurrent-requests\"><a href=\"#Non-concurrent-requests\" class=\"headerlink\" title=\"Non-concurrent requests\"></a>Non-concurrent requests</h2><p>In the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. </p>\n<p>The get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the <a href=\"https://nodejs.org/api/process.html#process_process_hrtime_time\" target=\"_blank\" rel=\"noopener\">hrtime()</a> method from the process package.</p>\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\n<p>Due to the get function being called straight with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" target=\"_blank\" rel=\"noopener\">await</a> keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.</p>\n<p><img src=\"/blog/blog-images/non-concurrent.gif\" alt=\"Non concurrent\"></p>\n<h2 id=\"Concurrent-requests\"><a href=\"#Concurrent-requests\" class=\"headerlink\" title=\"Concurrent requests\"></a>Concurrent requests</h2><p>Since none of the results depend on each other, we can simply execute all the requests at once. </p>\n<p>With just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request’s execution time from 10s to 3s.</p>\n<p>In the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. </p>\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\n<p>In the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.</p>\n<p><img src=\"/blog/blog-images/concurrent.gif\" alt=\"Concurrent requests\"></p>\n<p>The Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">Promise.all()</a></li>\n<li><a href=\"https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/\" target=\"_blank\" rel=\"noopener\">Concurrency vs. Parallelism, Lokesh Gupta</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">Concurrency model and the event loop</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>What is concurrency anyway? You’ve probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:</p>\n<blockquote>\n<p>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_blank\" rel=\"noopener\">computer science</a>, <strong>concurrency</strong> is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.</p>\n</blockquote>\n<p>With this in mind, let’s go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.</p>\n<h2 id=\"Helper-function\"><a href=\"#Helper-function\" class=\"headerlink\" title=\"Helper function\"></a>Helper function</h2><p>In the script below, I implement a small helper function that uses <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.</p>\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n<h2 id=\"Non-concurrent-requests\"><a href=\"#Non-concurrent-requests\" class=\"headerlink\" title=\"Non-concurrent requests\"></a>Non-concurrent requests</h2><p>In the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. </p>\n<p>The get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the <a href=\"https://nodejs.org/api/process.html#process_process_hrtime_time\" target=\"_blank\" rel=\"noopener\">hrtime()</a> method from the process package.</p>\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\n<p>Due to the get function being called straight with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" target=\"_blank\" rel=\"noopener\">await</a> keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.</p>\n<p><img src=\"/blog/blog-images/non-concurrent.gif\" alt=\"Non concurrent\"></p>\n<h2 id=\"Concurrent-requests\"><a href=\"#Concurrent-requests\" class=\"headerlink\" title=\"Concurrent requests\"></a>Concurrent requests</h2><p>Since none of the results depend on each other, we can simply execute all the requests at once. </p>\n<p>With just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request’s execution time from 10s to 3s.</p>\n<p>In the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. </p>\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\n<p>In the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.</p>\n<p><img src=\"/blog/blog-images/concurrent.gif\" alt=\"Concurrent requests\"></p>\n<p>The Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">Promise.all()</a></li>\n<li><a href=\"https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/\" target=\"_blank\" rel=\"noopener\">Concurrency vs. Parallelism, Lokesh Gupta</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">Concurrency model and the event loop</a></li>\n</ul>\n"},{"title":"Import svelte components using an alias: @","date":"2020-02-18T21:59:48.000Z","metatags":"rollup, svelte","description":"Learn how to configure rollup to import Svelte components using an alias.","cover":"blog-images/import-svelte-components-with-an-alias.jpg","_content":"\nIf you just landed on Svelte's world coming from Vue.js, like me you probably miss the ability to import components or other source code files using the `@` symbol, just like this:\n\n```javascript\nimport ChatInput from \"@/components/ChatInput\";\nimport \"@/assets/main.css\";\n\n// Instead of\n\nimport ChatInput from \"../../components/ChatInput\";\nimport \"../../assets/main.css\";\n```\n\nA project generated with vue/cli uses webpack to resolve `@/`  to `src/` folder. If you're using the base [template](https://github.com/sveltejs/template)  from Svelte, you can have this feature too, with a few changes on [Rollup](https://rollupjs.org/guide/en/) configuration file.\n\n\n## Updating rollup.config.js\n\nRollup by default doesn't support aliases, but it has an official plugin that enables it, which is called [@rollup/plugin-alias](https://github.com/rollup/plugins/tree/master/packages/alias). Let's install it then:\n\n```bash\nnpm install --save-dev @rollup/plugin-alias\n```\n\nInside `rollup.config.js` file located in project root, import the alias plugin and the [path](https://nodejs.org/api/path.html) module from Nodejs:\n\n```javascript\nimport alias from \"@rollup/plugin-alias\";\nimport path from \"path\";\n```\n\nRollup's configuration file exports an object. Look for the property `plugins` inside the exported object, and then add following declaration:\n\n```javascript\nalias({\n  entries: [\n    {\n      find: \"@\",\n      replacement: path.resolve(__dirname, \"src/\")\n    }\n  ]\n})\n```\n\nIn the code above I am configuring a new alias, this plugin suports multitple alias, and the one I defined, will look for `@` symbol in any `import` declaration and then in compile time, will replace it by the full directory path to the `src` folder thanks to `path.resolve(__dirname, \"src/\")`.\n\nThat's it, after these small changes, you will be able to import components using `@` as an alias for the `src/` folder. \n\n\n## References\n\n* [Rollup alias docs](https://github.com/rollup/plugins/tree/master/packages/alias)\n* [Cover by Wonderlane](https://unsplash.com/photos/6jA6eVsRJ6Q)\n","source":"_posts/Import-svelte-components-using-an-alias.md","raw":"---\ntitle: 'Import svelte components using an alias: @'\ndate: 2020-02-18 21:59:48\nmetatags: rollup, svelte\ndescription: Learn how to configure rollup to import Svelte components using an alias.\ncover: \"blog-images/import-svelte-components-with-an-alias.jpg\"\n---\n\nIf you just landed on Svelte's world coming from Vue.js, like me you probably miss the ability to import components or other source code files using the `@` symbol, just like this:\n\n```javascript\nimport ChatInput from \"@/components/ChatInput\";\nimport \"@/assets/main.css\";\n\n// Instead of\n\nimport ChatInput from \"../../components/ChatInput\";\nimport \"../../assets/main.css\";\n```\n\nA project generated with vue/cli uses webpack to resolve `@/`  to `src/` folder. If you're using the base [template](https://github.com/sveltejs/template)  from Svelte, you can have this feature too, with a few changes on [Rollup](https://rollupjs.org/guide/en/) configuration file.\n\n\n## Updating rollup.config.js\n\nRollup by default doesn't support aliases, but it has an official plugin that enables it, which is called [@rollup/plugin-alias](https://github.com/rollup/plugins/tree/master/packages/alias). Let's install it then:\n\n```bash\nnpm install --save-dev @rollup/plugin-alias\n```\n\nInside `rollup.config.js` file located in project root, import the alias plugin and the [path](https://nodejs.org/api/path.html) module from Nodejs:\n\n```javascript\nimport alias from \"@rollup/plugin-alias\";\nimport path from \"path\";\n```\n\nRollup's configuration file exports an object. Look for the property `plugins` inside the exported object, and then add following declaration:\n\n```javascript\nalias({\n  entries: [\n    {\n      find: \"@\",\n      replacement: path.resolve(__dirname, \"src/\")\n    }\n  ]\n})\n```\n\nIn the code above I am configuring a new alias, this plugin suports multitple alias, and the one I defined, will look for `@` symbol in any `import` declaration and then in compile time, will replace it by the full directory path to the `src` folder thanks to `path.resolve(__dirname, \"src/\")`.\n\nThat's it, after these small changes, you will be able to import components using `@` as an alias for the `src/` folder. \n\n\n## References\n\n* [Rollup alias docs](https://github.com/rollup/plugins/tree/master/packages/alias)\n* [Cover by Wonderlane](https://unsplash.com/photos/6jA6eVsRJ6Q)\n","slug":"Import-svelte-components-using-an-alias","published":1,"updated":"2020-06-28T15:22:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51i0005u5yy5otjckny","content":"<p>If you just landed on Svelte’s world coming from Vue.js, like me you probably miss the ability to import components or other source code files using the <code>@</code> symbol, just like this:</p>\n<pre><code class=\"javascript\">import ChatInput from &quot;@/components/ChatInput&quot;;\nimport &quot;@/assets/main.css&quot;;\n\n// Instead of\n\nimport ChatInput from &quot;../../components/ChatInput&quot;;\nimport &quot;../../assets/main.css&quot;;</code></pre>\n<p>A project generated with vue/cli uses webpack to resolve <code>@/</code>  to <code>src/</code> folder. If you’re using the base <a href=\"https://github.com/sveltejs/template\" target=\"_blank\" rel=\"noopener\">template</a>  from Svelte, you can have this feature too, with a few changes on <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">Rollup</a> configuration file.</p>\n<h2 id=\"Updating-rollup-config-js\"><a href=\"#Updating-rollup-config-js\" class=\"headerlink\" title=\"Updating rollup.config.js\"></a>Updating rollup.config.js</h2><p>Rollup by default doesn’t support aliases, but it has an official plugin that enables it, which is called <a href=\"https://github.com/rollup/plugins/tree/master/packages/alias\" target=\"_blank\" rel=\"noopener\">@rollup/plugin-alias</a>. Let’s install it then:</p>\n<pre><code class=\"bash\">npm install --save-dev @rollup/plugin-alias</code></pre>\n<p>Inside <code>rollup.config.js</code> file located in project root, import the alias plugin and the <a href=\"https://nodejs.org/api/path.html\" target=\"_blank\" rel=\"noopener\">path</a> module from Nodejs:</p>\n<pre><code class=\"javascript\">import alias from &quot;@rollup/plugin-alias&quot;;\nimport path from &quot;path&quot;;</code></pre>\n<p>Rollup’s configuration file exports an object. Look for the property <code>plugins</code> inside the exported object, and then add following declaration:</p>\n<pre><code class=\"javascript\">alias({\n  entries: [\n    {\n      find: &quot;@&quot;,\n      replacement: path.resolve(__dirname, &quot;src/&quot;)\n    }\n  ]\n})</code></pre>\n<p>In the code above I am configuring a new alias, this plugin suports multitple alias, and the one I defined, will look for <code>@</code> symbol in any <code>import</code> declaration and then in compile time, will replace it by the full directory path to the <code>src</code> folder thanks to <code>path.resolve(__dirname, &quot;src/&quot;)</code>.</p>\n<p>That’s it, after these small changes, you will be able to import components using <code>@</code> as an alias for the <code>src/</code> folder. </p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://github.com/rollup/plugins/tree/master/packages/alias\" target=\"_blank\" rel=\"noopener\">Rollup alias docs</a></li>\n<li><a href=\"https://unsplash.com/photos/6jA6eVsRJ6Q\" target=\"_blank\" rel=\"noopener\">Cover by Wonderlane</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>If you just landed on Svelte’s world coming from Vue.js, like me you probably miss the ability to import components or other source code files using the <code>@</code> symbol, just like this:</p>\n<pre><code class=\"javascript\">import ChatInput from &quot;@/components/ChatInput&quot;;\nimport &quot;@/assets/main.css&quot;;\n\n// Instead of\n\nimport ChatInput from &quot;../../components/ChatInput&quot;;\nimport &quot;../../assets/main.css&quot;;</code></pre>\n<p>A project generated with vue/cli uses webpack to resolve <code>@/</code>  to <code>src/</code> folder. If you’re using the base <a href=\"https://github.com/sveltejs/template\" target=\"_blank\" rel=\"noopener\">template</a>  from Svelte, you can have this feature too, with a few changes on <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">Rollup</a> configuration file.</p>\n<h2 id=\"Updating-rollup-config-js\"><a href=\"#Updating-rollup-config-js\" class=\"headerlink\" title=\"Updating rollup.config.js\"></a>Updating rollup.config.js</h2><p>Rollup by default doesn’t support aliases, but it has an official plugin that enables it, which is called <a href=\"https://github.com/rollup/plugins/tree/master/packages/alias\" target=\"_blank\" rel=\"noopener\">@rollup/plugin-alias</a>. Let’s install it then:</p>\n<pre><code class=\"bash\">npm install --save-dev @rollup/plugin-alias</code></pre>\n<p>Inside <code>rollup.config.js</code> file located in project root, import the alias plugin and the <a href=\"https://nodejs.org/api/path.html\" target=\"_blank\" rel=\"noopener\">path</a> module from Nodejs:</p>\n<pre><code class=\"javascript\">import alias from &quot;@rollup/plugin-alias&quot;;\nimport path from &quot;path&quot;;</code></pre>\n<p>Rollup’s configuration file exports an object. Look for the property <code>plugins</code> inside the exported object, and then add following declaration:</p>\n<pre><code class=\"javascript\">alias({\n  entries: [\n    {\n      find: &quot;@&quot;,\n      replacement: path.resolve(__dirname, &quot;src/&quot;)\n    }\n  ]\n})</code></pre>\n<p>In the code above I am configuring a new alias, this plugin suports multitple alias, and the one I defined, will look for <code>@</code> symbol in any <code>import</code> declaration and then in compile time, will replace it by the full directory path to the <code>src</code> folder thanks to <code>path.resolve(__dirname, &quot;src/&quot;)</code>.</p>\n<p>That’s it, after these small changes, you will be able to import components using <code>@</code> as an alias for the <code>src/</code> folder. </p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://github.com/rollup/plugins/tree/master/packages/alias\" target=\"_blank\" rel=\"noopener\">Rollup alias docs</a></li>\n<li><a href=\"https://unsplash.com/photos/6jA6eVsRJ6Q\" target=\"_blank\" rel=\"noopener\">Cover by Wonderlane</a></li>\n</ul>\n"},{"title":"MongoDB/Mongoose minimal offset-based pagination","date":"2020-01-14T23:29:53.000Z","metatags":"mongodb, express, nodejs, pagination, offset","description":"Learn more about offset-based pagination using MongoDB and Mongoose","cover":"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","_content":"\nIt's minimal because I don't implement the following features in the pagination:\n\n- Current page\n- Previous page\n- Next page\n- Total items\n\nLet's assume you have a collection called cars, and you don't want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:\n\n- To limit the query results. It's a good idea to set a default limit value.\n- Enabling API consumers to set the results limit when performing a request, using query variables.\n- Enabling API consumers to set the page or offset value when performing a query, using query variables.\n- Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.\n\nTo materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:\n\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\nIn the code above, I:\n\n- Set the default results limit value to 50.\n- I assign the query variables `limit` and `offset` values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.\n- I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using [express-validation](https://www.npmjs.com/package/express-validation) and [joi](https://www.npmjs.com/package/joi).\n- Then I finally perform the query on the `CarsModel` using the `.skip()` and `.limit()` methods.\n\n## What's the purpose of .skip()?\n\nFrom MongoDB documentation:\n\n> Skips over the specified number of [documents](https://docs.mongodb.com/manual/reference/glossary/#term-document) that pass into the stage and passes the remaining documents to the next stage in the [pipeline](https://docs.mongodb.com/manual/reference/glossary/#term-pipeline).\n\nIn more simple words, when you specify `Model.find().limit(50).skip(1)` while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.\n\n## References\n\n- [Query.prototype.skip()](https://mongoosejs.com/docs/api.html#query_Query-skip)\n- [\\$skip (aggregation)](https://docs.mongodb.com/manual/reference/operator/aggregation/skip/)\n- [Post cover author](https://urlfy.xyz/AAAF2Jno)\n","source":"_posts/MongoDB-Mongoose-minimal-offset-based-pagination.md","raw":"---\ntitle: MongoDB/Mongoose minimal offset-based pagination\ndate: 2020-01-14 23:29:53\nmetatags: mongodb, express, nodejs, pagination, offset\ndescription: Learn more about offset-based pagination using MongoDB and Mongoose\ncover: \"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png\"\n---\n\nIt's minimal because I don't implement the following features in the pagination:\n\n- Current page\n- Previous page\n- Next page\n- Total items\n\nLet's assume you have a collection called cars, and you don't want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:\n\n- To limit the query results. It's a good idea to set a default limit value.\n- Enabling API consumers to set the results limit when performing a request, using query variables.\n- Enabling API consumers to set the page or offset value when performing a query, using query variables.\n- Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.\n\nTo materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:\n\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\nIn the code above, I:\n\n- Set the default results limit value to 50.\n- I assign the query variables `limit` and `offset` values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.\n- I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using [express-validation](https://www.npmjs.com/package/express-validation) and [joi](https://www.npmjs.com/package/joi).\n- Then I finally perform the query on the `CarsModel` using the `.skip()` and `.limit()` methods.\n\n## What's the purpose of .skip()?\n\nFrom MongoDB documentation:\n\n> Skips over the specified number of [documents](https://docs.mongodb.com/manual/reference/glossary/#term-document) that pass into the stage and passes the remaining documents to the next stage in the [pipeline](https://docs.mongodb.com/manual/reference/glossary/#term-pipeline).\n\nIn more simple words, when you specify `Model.find().limit(50).skip(1)` while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.\n\n## References\n\n- [Query.prototype.skip()](https://mongoosejs.com/docs/api.html#query_Query-skip)\n- [\\$skip (aggregation)](https://docs.mongodb.com/manual/reference/operator/aggregation/skip/)\n- [Post cover author](https://urlfy.xyz/AAAF2Jno)\n","slug":"MongoDB-Mongoose-minimal-offset-based-pagination","published":1,"updated":"2020-06-28T15:22:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51j0006u5yy0ik277si","content":"<p>It’s minimal because I don’t implement the following features in the pagination:</p>\n<ul>\n<li>Current page</li>\n<li>Previous page</li>\n<li>Next page</li>\n<li>Total items</li>\n</ul>\n<p>Let’s assume you have a collection called cars, and you don’t want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:</p>\n<ul>\n<li>To limit the query results. It’s a good idea to set a default limit value.</li>\n<li>Enabling API consumers to set the results limit when performing a request, using query variables.</li>\n<li>Enabling API consumers to set the page or offset value when performing a query, using query variables.</li>\n<li>Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.</li>\n</ul>\n<p>To materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:</p>\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\n<p>In the code above, I:</p>\n<ul>\n<li>Set the default results limit value to 50.</li>\n<li>I assign the query variables <code>limit</code> and <code>offset</code> values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.</li>\n<li>I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using <a href=\"https://www.npmjs.com/package/express-validation\" target=\"_blank\" rel=\"noopener\">express-validation</a> and <a href=\"https://www.npmjs.com/package/joi\" target=\"_blank\" rel=\"noopener\">joi</a>.</li>\n<li>Then I finally perform the query on the <code>CarsModel</code> using the <code>.skip()</code> and <code>.limit()</code> methods.</li>\n</ul>\n<h2 id=\"What’s-the-purpose-of-skip\"><a href=\"#What’s-the-purpose-of-skip\" class=\"headerlink\" title=\"What’s the purpose of .skip()?\"></a>What’s the purpose of .skip()?</h2><p>From MongoDB documentation:</p>\n<blockquote>\n<p>Skips over the specified number of <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-document\" target=\"_blank\" rel=\"noopener\">documents</a> that pass into the stage and passes the remaining documents to the next stage in the <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-pipeline\" target=\"_blank\" rel=\"noopener\">pipeline</a>.</p>\n</blockquote>\n<p>In more simple words, when you specify <code>Model.find().limit(50).skip(1)</code> while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://mongoosejs.com/docs/api.html#query_Query-skip\" target=\"_blank\" rel=\"noopener\">Query.prototype.skip()</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/skip/\" target=\"_blank\" rel=\"noopener\">$skip (aggregation)</a></li>\n<li><a href=\"https://urlfy.xyz/AAAF2Jno\" target=\"_blank\" rel=\"noopener\">Post cover author</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s minimal because I don’t implement the following features in the pagination:</p>\n<ul>\n<li>Current page</li>\n<li>Previous page</li>\n<li>Next page</li>\n<li>Total items</li>\n</ul>\n<p>Let’s assume you have a collection called cars, and you don’t want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:</p>\n<ul>\n<li>To limit the query results. It’s a good idea to set a default limit value.</li>\n<li>Enabling API consumers to set the results limit when performing a request, using query variables.</li>\n<li>Enabling API consumers to set the page or offset value when performing a query, using query variables.</li>\n<li>Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.</li>\n</ul>\n<p>To materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:</p>\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\n<p>In the code above, I:</p>\n<ul>\n<li>Set the default results limit value to 50.</li>\n<li>I assign the query variables <code>limit</code> and <code>offset</code> values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.</li>\n<li>I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using <a href=\"https://www.npmjs.com/package/express-validation\" target=\"_blank\" rel=\"noopener\">express-validation</a> and <a href=\"https://www.npmjs.com/package/joi\" target=\"_blank\" rel=\"noopener\">joi</a>.</li>\n<li>Then I finally perform the query on the <code>CarsModel</code> using the <code>.skip()</code> and <code>.limit()</code> methods.</li>\n</ul>\n<h2 id=\"What’s-the-purpose-of-skip\"><a href=\"#What’s-the-purpose-of-skip\" class=\"headerlink\" title=\"What’s the purpose of .skip()?\"></a>What’s the purpose of .skip()?</h2><p>From MongoDB documentation:</p>\n<blockquote>\n<p>Skips over the specified number of <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-document\" target=\"_blank\" rel=\"noopener\">documents</a> that pass into the stage and passes the remaining documents to the next stage in the <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-pipeline\" target=\"_blank\" rel=\"noopener\">pipeline</a>.</p>\n</blockquote>\n<p>In more simple words, when you specify <code>Model.find().limit(50).skip(1)</code> while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://mongoosejs.com/docs/api.html#query_Query-skip\" target=\"_blank\" rel=\"noopener\">Query.prototype.skip()</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/skip/\" target=\"_blank\" rel=\"noopener\">$skip (aggregation)</a></li>\n<li><a href=\"https://urlfy.xyz/AAAF2Jno\" target=\"_blank\" rel=\"noopener\">Post cover author</a></li>\n</ul>\n"},{"title":"Searching inside of an array of objects - Javascript","date":"2020-02-10T17:57:20.000Z","metatags":"javascript","description":"Searching inside of an array of objects using .filter() and .search() methods in Javascript.","cover":"blog-images/searching-inside-of-an-array-of-objects.jpg","_content":"\nOne of my favorite methods from the `Arrays` object, is the `.filter()` method. It allows javascript programs to search for an element inside of an array. What I like the most about this method, is that developers have the flexibility of searching an item inside of an array of any data structure.\n\nOn this blog post, I will focus on:\n\n* Searching/filtering items inside of an array of objects\n* Write a wrapper function that allows javascript programs to search/filter items inside of an of array of objects\n\n## The syntax of filter()\n\nThe `.filter()` method receives a function as a callback or argument. This function has one mandatory argument which represents each item in the array. The callback function needs to return either `true` or `false` by testing the existence or non-existence of each array's element.\n\n### Searching/filtering an element of type Number\n\n```javascript\nconst x = [0, 1, 20, 4, 5];\n\nconsole.log(\n\tx.filter(item => item === 4)\n);\n\n// 4\n```\n\n## Searching for objects\n\nTo search for an object inside of an array, it's important to know the object structure and then write a callback function that fits that.\n\n### Example:\n\n```javascript\nconst listOfNames = [\n  {\n    name: \"Firmino\",\n    age: 23\n  },\n  {\n    name: \"Gonçalves\",\n    age: 19\n  },\n  {\n    name: \"Changani\",\n    age: 8\n  },\n  {\n    name: \"Nelson\",\n    age: 67\n  },\n  {\n    name: \"Mandela\",\n    age: 34\n  }\n];\n\nconst result = listOfNames.filter(\n  item => {\n    return item.name.search(new RegExp(\"MANDELA\", \"i\")) >= 0;\n  }\n);\n\nconsole.log(result);\n```\n\nThe code above is little bit more complex than the first example, but the essence is exactly the same:\n\n* An array `listOfNames` that contains several objects, each with two properties: `name` and `age`\n* The result of the filter operation will be assigned to the `result` constant\n* Inside the callback function, I am using the `.search()` method on `item.name` to search for the string `MANDELA`. `.search()` is case sensitive, it tries to look for the exact same string. To go around this, I am passing a regular expression with the option `i` for case insensitive, instead of plain string\n* `.search` will return `-1` if it couldn't match the string, or it will return a positive integer starting from `O` if the string was matched\n\n## A general solution\n\nThe code above works, but I decided to work on a general approach that would also allow programs to set the object property to be used as a search parameter, and also support filtering/searching on properties with `Number` as data type.\n\n```javascript\n/*\n* search: It return an array of elements that match\n* the search condition\n* @param {Array} arr\n* @param {String} prop\n* @param {String/Number} param\n* @returns {Array}\n*/\nfunction search(arr = [], prop, param) {\n  const searchParam = new RegExp(param, \"i\");\n  return arr.filter(\n    item => {\n      return new String(item[prop]).search(searchParam) >= 0;\n    }\n  );\n}\n```\n\n* The search function receives 3 arguments: `arr` an Array of objects, `prop` the property to be used as search/filter parameter, and `param` which represents the actual value we expect the `.search()` to match\n* To improve the readability, I assigned the regular expression declaration to the `searchParam` constant\n* And to support the `Number` data type, I decided to wrap `item[prop]` inside of `new String()`. This means that each property value would be converted to a `String`\n* And last, since the function doesn't know which object property would be used as a search parameter, I decided to access the property by using a square brackets and pass the `prop` value like this`item[prop]` \n\nThis function could be improved, with things like parameter validation, support for nested objects and so on, but for the sake of simplicity, I decided to leave it just like it is right now. \n\n## References\n\n* [String.prototype.search()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\n* [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n* [Post cover by Aurelien Romain](https://unsplash.com/photos/ge2mkvxvS_Q)","source":"_posts/Searching-inside-of-an-array-of-objects.md","raw":"---\ntitle: Searching inside of an array of objects - Javascript\ndate: 2020-02-10 17:57:20\nmetatags: javascript\ndescription: Searching inside of an array of objects using .filter() and .search() methods in Javascript.\ncover: \"blog-images/searching-inside-of-an-array-of-objects.jpg\"\n---\n\nOne of my favorite methods from the `Arrays` object, is the `.filter()` method. It allows javascript programs to search for an element inside of an array. What I like the most about this method, is that developers have the flexibility of searching an item inside of an array of any data structure.\n\nOn this blog post, I will focus on:\n\n* Searching/filtering items inside of an array of objects\n* Write a wrapper function that allows javascript programs to search/filter items inside of an of array of objects\n\n## The syntax of filter()\n\nThe `.filter()` method receives a function as a callback or argument. This function has one mandatory argument which represents each item in the array. The callback function needs to return either `true` or `false` by testing the existence or non-existence of each array's element.\n\n### Searching/filtering an element of type Number\n\n```javascript\nconst x = [0, 1, 20, 4, 5];\n\nconsole.log(\n\tx.filter(item => item === 4)\n);\n\n// 4\n```\n\n## Searching for objects\n\nTo search for an object inside of an array, it's important to know the object structure and then write a callback function that fits that.\n\n### Example:\n\n```javascript\nconst listOfNames = [\n  {\n    name: \"Firmino\",\n    age: 23\n  },\n  {\n    name: \"Gonçalves\",\n    age: 19\n  },\n  {\n    name: \"Changani\",\n    age: 8\n  },\n  {\n    name: \"Nelson\",\n    age: 67\n  },\n  {\n    name: \"Mandela\",\n    age: 34\n  }\n];\n\nconst result = listOfNames.filter(\n  item => {\n    return item.name.search(new RegExp(\"MANDELA\", \"i\")) >= 0;\n  }\n);\n\nconsole.log(result);\n```\n\nThe code above is little bit more complex than the first example, but the essence is exactly the same:\n\n* An array `listOfNames` that contains several objects, each with two properties: `name` and `age`\n* The result of the filter operation will be assigned to the `result` constant\n* Inside the callback function, I am using the `.search()` method on `item.name` to search for the string `MANDELA`. `.search()` is case sensitive, it tries to look for the exact same string. To go around this, I am passing a regular expression with the option `i` for case insensitive, instead of plain string\n* `.search` will return `-1` if it couldn't match the string, or it will return a positive integer starting from `O` if the string was matched\n\n## A general solution\n\nThe code above works, but I decided to work on a general approach that would also allow programs to set the object property to be used as a search parameter, and also support filtering/searching on properties with `Number` as data type.\n\n```javascript\n/*\n* search: It return an array of elements that match\n* the search condition\n* @param {Array} arr\n* @param {String} prop\n* @param {String/Number} param\n* @returns {Array}\n*/\nfunction search(arr = [], prop, param) {\n  const searchParam = new RegExp(param, \"i\");\n  return arr.filter(\n    item => {\n      return new String(item[prop]).search(searchParam) >= 0;\n    }\n  );\n}\n```\n\n* The search function receives 3 arguments: `arr` an Array of objects, `prop` the property to be used as search/filter parameter, and `param` which represents the actual value we expect the `.search()` to match\n* To improve the readability, I assigned the regular expression declaration to the `searchParam` constant\n* And to support the `Number` data type, I decided to wrap `item[prop]` inside of `new String()`. This means that each property value would be converted to a `String`\n* And last, since the function doesn't know which object property would be used as a search parameter, I decided to access the property by using a square brackets and pass the `prop` value like this`item[prop]` \n\nThis function could be improved, with things like parameter validation, support for nested objects and so on, but for the sake of simplicity, I decided to leave it just like it is right now. \n\n## References\n\n* [String.prototype.search()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\n* [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n* [Post cover by Aurelien Romain](https://unsplash.com/photos/ge2mkvxvS_Q)","slug":"Searching-inside-of-an-array-of-objects","published":1,"updated":"2020-06-28T15:22:56.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51k0007u5yy8n6jd2xx","content":"<p>One of my favorite methods from the <code>Arrays</code> object, is the <code>.filter()</code> method. It allows javascript programs to search for an element inside of an array. What I like the most about this method, is that developers have the flexibility of searching an item inside of an array of any data structure.</p>\n<p>On this blog post, I will focus on:</p>\n<ul>\n<li>Searching/filtering items inside of an array of objects</li>\n<li>Write a wrapper function that allows javascript programs to search/filter items inside of an of array of objects</li>\n</ul>\n<h2 id=\"The-syntax-of-filter\"><a href=\"#The-syntax-of-filter\" class=\"headerlink\" title=\"The syntax of filter()\"></a>The syntax of filter()</h2><p>The <code>.filter()</code> method receives a function as a callback or argument. This function has one mandatory argument which represents each item in the array. The callback function needs to return either <code>true</code> or <code>false</code> by testing the existence or non-existence of each array’s element.</p>\n<h3 id=\"Searching-filtering-an-element-of-type-Number\"><a href=\"#Searching-filtering-an-element-of-type-Number\" class=\"headerlink\" title=\"Searching/filtering an element of type Number\"></a>Searching/filtering an element of type Number</h3><pre><code class=\"javascript\">const x = [0, 1, 20, 4, 5];\n\nconsole.log(\n    x.filter(item =&gt; item === 4)\n);\n\n// 4</code></pre>\n<h2 id=\"Searching-for-objects\"><a href=\"#Searching-for-objects\" class=\"headerlink\" title=\"Searching for objects\"></a>Searching for objects</h2><p>To search for an object inside of an array, it’s important to know the object structure and then write a callback function that fits that.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><pre><code class=\"javascript\">const listOfNames = [\n  {\n    name: &quot;Firmino&quot;,\n    age: 23\n  },\n  {\n    name: &quot;Gonçalves&quot;,\n    age: 19\n  },\n  {\n    name: &quot;Changani&quot;,\n    age: 8\n  },\n  {\n    name: &quot;Nelson&quot;,\n    age: 67\n  },\n  {\n    name: &quot;Mandela&quot;,\n    age: 34\n  }\n];\n\nconst result = listOfNames.filter(\n  item =&gt; {\n    return item.name.search(new RegExp(&quot;MANDELA&quot;, &quot;i&quot;)) &gt;= 0;\n  }\n);\n\nconsole.log(result);</code></pre>\n<p>The code above is little bit more complex than the first example, but the essence is exactly the same:</p>\n<ul>\n<li>An array <code>listOfNames</code> that contains several objects, each with two properties: <code>name</code> and <code>age</code></li>\n<li>The result of the filter operation will be assigned to the <code>result</code> constant</li>\n<li>Inside the callback function, I am using the <code>.search()</code> method on <code>item.name</code> to search for the string <code>MANDELA</code>. <code>.search()</code> is case sensitive, it tries to look for the exact same string. To go around this, I am passing a regular expression with the option <code>i</code> for case insensitive, instead of plain string</li>\n<li><code>.search</code> will return <code>-1</code> if it couldn’t match the string, or it will return a positive integer starting from <code>O</code> if the string was matched</li>\n</ul>\n<h2 id=\"A-general-solution\"><a href=\"#A-general-solution\" class=\"headerlink\" title=\"A general solution\"></a>A general solution</h2><p>The code above works, but I decided to work on a general approach that would also allow programs to set the object property to be used as a search parameter, and also support filtering/searching on properties with <code>Number</code> as data type.</p>\n<pre><code class=\"javascript\">/*\n* search: It return an array of elements that match\n* the search condition\n* @param {Array} arr\n* @param {String} prop\n* @param {String/Number} param\n* @returns {Array}\n*/\nfunction search(arr = [], prop, param) {\n  const searchParam = new RegExp(param, &quot;i&quot;);\n  return arr.filter(\n    item =&gt; {\n      return new String(item[prop]).search(searchParam) &gt;= 0;\n    }\n  );\n}</code></pre>\n<ul>\n<li>The search function receives 3 arguments: <code>arr</code> an Array of objects, <code>prop</code> the property to be used as search/filter parameter, and <code>param</code> which represents the actual value we expect the <code>.search()</code> to match</li>\n<li>To improve the readability, I assigned the regular expression declaration to the <code>searchParam</code> constant</li>\n<li>And to support the <code>Number</code> data type, I decided to wrap <code>item[prop]</code> inside of <code>new String()</code>. This means that each property value would be converted to a <code>String</code></li>\n<li>And last, since the function doesn’t know which object property would be used as a search parameter, I decided to access the property by using a square brackets and pass the <code>prop</code> value like this<code>item[prop]</code> </li>\n</ul>\n<p>This function could be improved, with things like parameter validation, support for nested objects and so on, but for the sake of simplicity, I decided to leave it just like it is right now. </p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\">String.prototype.search()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">Array.prototype.filter()</a></li>\n<li><a href=\"https://unsplash.com/photos/ge2mkvxvS_Q\" target=\"_blank\" rel=\"noopener\">Post cover by Aurelien Romain</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>One of my favorite methods from the <code>Arrays</code> object, is the <code>.filter()</code> method. It allows javascript programs to search for an element inside of an array. What I like the most about this method, is that developers have the flexibility of searching an item inside of an array of any data structure.</p>\n<p>On this blog post, I will focus on:</p>\n<ul>\n<li>Searching/filtering items inside of an array of objects</li>\n<li>Write a wrapper function that allows javascript programs to search/filter items inside of an of array of objects</li>\n</ul>\n<h2 id=\"The-syntax-of-filter\"><a href=\"#The-syntax-of-filter\" class=\"headerlink\" title=\"The syntax of filter()\"></a>The syntax of filter()</h2><p>The <code>.filter()</code> method receives a function as a callback or argument. This function has one mandatory argument which represents each item in the array. The callback function needs to return either <code>true</code> or <code>false</code> by testing the existence or non-existence of each array’s element.</p>\n<h3 id=\"Searching-filtering-an-element-of-type-Number\"><a href=\"#Searching-filtering-an-element-of-type-Number\" class=\"headerlink\" title=\"Searching/filtering an element of type Number\"></a>Searching/filtering an element of type Number</h3><pre><code class=\"javascript\">const x = [0, 1, 20, 4, 5];\n\nconsole.log(\n    x.filter(item =&gt; item === 4)\n);\n\n// 4</code></pre>\n<h2 id=\"Searching-for-objects\"><a href=\"#Searching-for-objects\" class=\"headerlink\" title=\"Searching for objects\"></a>Searching for objects</h2><p>To search for an object inside of an array, it’s important to know the object structure and then write a callback function that fits that.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><pre><code class=\"javascript\">const listOfNames = [\n  {\n    name: &quot;Firmino&quot;,\n    age: 23\n  },\n  {\n    name: &quot;Gonçalves&quot;,\n    age: 19\n  },\n  {\n    name: &quot;Changani&quot;,\n    age: 8\n  },\n  {\n    name: &quot;Nelson&quot;,\n    age: 67\n  },\n  {\n    name: &quot;Mandela&quot;,\n    age: 34\n  }\n];\n\nconst result = listOfNames.filter(\n  item =&gt; {\n    return item.name.search(new RegExp(&quot;MANDELA&quot;, &quot;i&quot;)) &gt;= 0;\n  }\n);\n\nconsole.log(result);</code></pre>\n<p>The code above is little bit more complex than the first example, but the essence is exactly the same:</p>\n<ul>\n<li>An array <code>listOfNames</code> that contains several objects, each with two properties: <code>name</code> and <code>age</code></li>\n<li>The result of the filter operation will be assigned to the <code>result</code> constant</li>\n<li>Inside the callback function, I am using the <code>.search()</code> method on <code>item.name</code> to search for the string <code>MANDELA</code>. <code>.search()</code> is case sensitive, it tries to look for the exact same string. To go around this, I am passing a regular expression with the option <code>i</code> for case insensitive, instead of plain string</li>\n<li><code>.search</code> will return <code>-1</code> if it couldn’t match the string, or it will return a positive integer starting from <code>O</code> if the string was matched</li>\n</ul>\n<h2 id=\"A-general-solution\"><a href=\"#A-general-solution\" class=\"headerlink\" title=\"A general solution\"></a>A general solution</h2><p>The code above works, but I decided to work on a general approach that would also allow programs to set the object property to be used as a search parameter, and also support filtering/searching on properties with <code>Number</code> as data type.</p>\n<pre><code class=\"javascript\">/*\n* search: It return an array of elements that match\n* the search condition\n* @param {Array} arr\n* @param {String} prop\n* @param {String/Number} param\n* @returns {Array}\n*/\nfunction search(arr = [], prop, param) {\n  const searchParam = new RegExp(param, &quot;i&quot;);\n  return arr.filter(\n    item =&gt; {\n      return new String(item[prop]).search(searchParam) &gt;= 0;\n    }\n  );\n}</code></pre>\n<ul>\n<li>The search function receives 3 arguments: <code>arr</code> an Array of objects, <code>prop</code> the property to be used as search/filter parameter, and <code>param</code> which represents the actual value we expect the <code>.search()</code> to match</li>\n<li>To improve the readability, I assigned the regular expression declaration to the <code>searchParam</code> constant</li>\n<li>And to support the <code>Number</code> data type, I decided to wrap <code>item[prop]</code> inside of <code>new String()</code>. This means that each property value would be converted to a <code>String</code></li>\n<li>And last, since the function doesn’t know which object property would be used as a search parameter, I decided to access the property by using a square brackets and pass the <code>prop</code> value like this<code>item[prop]</code> </li>\n</ul>\n<p>This function could be improved, with things like parameter validation, support for nested objects and so on, but for the sake of simplicity, I decided to leave it just like it is right now. </p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\">String.prototype.search()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener\">Array.prototype.filter()</a></li>\n<li><a href=\"https://unsplash.com/photos/ge2mkvxvS_Q\" target=\"_blank\" rel=\"noopener\">Post cover by Aurelien Romain</a></li>\n</ul>\n"},{"title":"Sequelize and UUID as primary key","date":"2020-02-06T14:07:25.000Z","metatags":"database, sequelize, orm","description":"Understand how you can use UUIDs as a primary key on Sequelize ORM","cover":"blog-images/sequelize-and-uuid-as-primary-key.jpg","_content":"\nBy default sequelize models and migrations are generated with the column `id` as the primary key, the data type set to `INTEGER` and, with the option `autoIncrement` set to `true`. This means that each row will have a sequential `id` starting from `1`.\n\n### User migration file\n```javascript\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\nThis is a classical approach and works perfectly, but when your application needs to expose data to the outside world, for instance, through a REST API, HTTP API or even GraphQL, special attention is required to the `id` column to avoid common situations like:\n\n* Users trying to guess the table records frrom the primary key value\n* A rare and extreme situation, your database may ran out of integers, just like it happend to [Basecamp](https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352).\n\n> Read the article [BIGINT v INT. Is there a big deal?](http://ronaldbradford.com/blog/bigint-v-int-is-there-a-big-deal-2008-07-18/)\n\nIf you want to learn more about the pros and cons of using UUIDs as primary key, here are two blog posts that may enlight you:\n\n* [UUID or GUID as Primary Keys? Be Careful!](https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352)\n* [Do you really need a UUID/GUID?](https://rclayton.silvrback.com/do-you-really-need-a-uuid-guid)\n\n\n\n> UUIDs will consume extra space in your database due to the length of each UUID value. Also, keep in mind that indexing a column with a complex value like a UUID may cause performance issues.\n\n\n\n## Using UUIDs\n\nThe Sequelize module has already prebuilt properties that will help define the data type and generate UUIDs in execution time. Let's procede by refactoring the migration file:\n\n### User migration\n\n```javascript\n// Migration\n\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\nIn the code above the following changes were made:\n\n* The property `autoIncrement` was removed. There's no point in having it since the UUID datatype is not incrementable.\n* The property `type`  received the value `Sequelize.UUID`\n* The property `defaultValue` was added and assigned the value `Sequelize.UUIDV4`, so every time an `INSERT` operation is made, Sequelize will take care of the process of generating a new UUID value, on this case, it will use the [version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)), which is purely random.\n\n### User model\n\nTo keep the database base definition consistent across the project codebase, the changes in the migration files need to reflect in the User model file too.\n\n```javascript\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const users = sequelize.define('users', {\n  \tid: {\n    \tallowNull: false,\n\t    primaryKey: true,\n    \ttype: DataTypes.UUID,\n    \tdefaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};\n```\n\nJust like in the migration file: \n\n* The property `autoIncrement` was removed\n* The `type` property was changed to UUID, but this time, using the object `DataTypes` instead of `Sequelize`\n* It was added the property `defaultValue` and it receives the value `DataTypes.UUIDV4`\n\nThat's all you need to have UUIDs working with Sequelize. \n\n## Another use cases for UUIDs\n\nI have other two use cases for UUIDs as the data type of columns: \n\n* **Email account verification**: when a user is created, a unique token is generated so the user can verify his account. In this case, a link with the same token is sent to the user's mail address, once the user clicks on it, the column holding the token is updated to `null`.\n* **Password reset**: when the user resets his password, a mail with a token is sent to his email account. In this case, when the user clicks in the link, if the expiry date is less or equal than the current time, then the column holding the token is set to `null`. \n\nFor both cases I usually have the following columns:\n\n* `mailConfirmationToken : UUID`\n* `passwordResetToken : UUID`\n* `passwordResetTokenExpiryDate : Date`\n\n### User migration\n\n```javascript\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n      mailConfirmationToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetTokenExpiryDate: {\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\n\n\n### User model\n\n```javascript\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const users = sequelize.define('users', {\n  \tid: {\n    \tallowNull: false,\n\t    primaryKey: true,\n    \ttype: DataTypes.UUID,\n    \tdefaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n    mailConfirmationToken: DataTypes.UUID,\n    passwordResetToken: DataTypes.UUID,\n    passwordResetTokenExpiryDate: DataTypes.DATE\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};\n```\n\n\n## References\n\n* [UUIDs are Popular, but Bad for Performance — Let’s Discuss](https://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/)\n* [Universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))\n* [Post cover by Samantha Lam](https://unsplash.com/photos/zFy6fOPZEu0) \n\n","source":"_posts/Sequelize-and-UUID-as-primary-key.md","raw":"---\ntitle: Sequelize and UUID as primary key\ndate: 2020-02-06 14:07:25\nmetatags: database, sequelize, orm\ndescription: Understand how you can use UUIDs as a primary key on Sequelize ORM\ncover: \"blog-images/sequelize-and-uuid-as-primary-key.jpg\"\n---\n\nBy default sequelize models and migrations are generated with the column `id` as the primary key, the data type set to `INTEGER` and, with the option `autoIncrement` set to `true`. This means that each row will have a sequential `id` starting from `1`.\n\n### User migration file\n```javascript\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\nThis is a classical approach and works perfectly, but when your application needs to expose data to the outside world, for instance, through a REST API, HTTP API or even GraphQL, special attention is required to the `id` column to avoid common situations like:\n\n* Users trying to guess the table records frrom the primary key value\n* A rare and extreme situation, your database may ran out of integers, just like it happend to [Basecamp](https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352).\n\n> Read the article [BIGINT v INT. Is there a big deal?](http://ronaldbradford.com/blog/bigint-v-int-is-there-a-big-deal-2008-07-18/)\n\nIf you want to learn more about the pros and cons of using UUIDs as primary key, here are two blog posts that may enlight you:\n\n* [UUID or GUID as Primary Keys? Be Careful!](https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352)\n* [Do you really need a UUID/GUID?](https://rclayton.silvrback.com/do-you-really-need-a-uuid-guid)\n\n\n\n> UUIDs will consume extra space in your database due to the length of each UUID value. Also, keep in mind that indexing a column with a complex value like a UUID may cause performance issues.\n\n\n\n## Using UUIDs\n\nThe Sequelize module has already prebuilt properties that will help define the data type and generate UUIDs in execution time. Let's procede by refactoring the migration file:\n\n### User migration\n\n```javascript\n// Migration\n\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\nIn the code above the following changes were made:\n\n* The property `autoIncrement` was removed. There's no point in having it since the UUID datatype is not incrementable.\n* The property `type`  received the value `Sequelize.UUID`\n* The property `defaultValue` was added and assigned the value `Sequelize.UUIDV4`, so every time an `INSERT` operation is made, Sequelize will take care of the process of generating a new UUID value, on this case, it will use the [version 4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)), which is purely random.\n\n### User model\n\nTo keep the database base definition consistent across the project codebase, the changes in the migration files need to reflect in the User model file too.\n\n```javascript\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const users = sequelize.define('users', {\n  \tid: {\n    \tallowNull: false,\n\t    primaryKey: true,\n    \ttype: DataTypes.UUID,\n    \tdefaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};\n```\n\nJust like in the migration file: \n\n* The property `autoIncrement` was removed\n* The `type` property was changed to UUID, but this time, using the object `DataTypes` instead of `Sequelize`\n* It was added the property `defaultValue` and it receives the value `DataTypes.UUIDV4`\n\nThat's all you need to have UUIDs working with Sequelize. \n\n## Another use cases for UUIDs\n\nI have other two use cases for UUIDs as the data type of columns: \n\n* **Email account verification**: when a user is created, a unique token is generated so the user can verify his account. In this case, a link with the same token is sent to the user's mail address, once the user clicks on it, the column holding the token is updated to `null`.\n* **Password reset**: when the user resets his password, a mail with a token is sent to his email account. In this case, when the user clicks in the link, if the expiry date is less or equal than the current time, then the column holding the token is set to `null`. \n\nFor both cases I usually have the following columns:\n\n* `mailConfirmationToken : UUID`\n* `passwordResetToken : UUID`\n* `passwordResetTokenExpiryDate : Date`\n\n### User migration\n\n```javascript\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('users', {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n      mailConfirmationToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetTokenExpiryDate: {\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('users');\n  }\n};\n```\n\n\n\n### User model\n\n```javascript\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const users = sequelize.define('users', {\n  \tid: {\n    \tallowNull: false,\n\t    primaryKey: true,\n    \ttype: DataTypes.UUID,\n    \tdefaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n    mailConfirmationToken: DataTypes.UUID,\n    passwordResetToken: DataTypes.UUID,\n    passwordResetTokenExpiryDate: DataTypes.DATE\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};\n```\n\n\n## References\n\n* [UUIDs are Popular, but Bad for Performance — Let’s Discuss](https://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/)\n* [Universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))\n* [Post cover by Samantha Lam](https://unsplash.com/photos/zFy6fOPZEu0) \n\n","slug":"Sequelize-and-UUID-as-primary-key","published":1,"updated":"2020-06-28T15:22:56.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51k0008u5yy77nm99mc","content":"<p>By default sequelize models and migrations are generated with the column <code>id</code> as the primary key, the data type set to <code>INTEGER</code> and, with the option <code>autoIncrement</code> set to <code>true</code>. This means that each row will have a sequential <code>id</code> starting from <code>1</code>.</p>\n<h3 id=\"User-migration-file\"><a href=\"#User-migration-file\" class=\"headerlink\" title=\"User migration file\"></a>User migration file</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<p>This is a classical approach and works perfectly, but when your application needs to expose data to the outside world, for instance, through a REST API, HTTP API or even GraphQL, special attention is required to the <code>id</code> column to avoid common situations like:</p>\n<ul>\n<li>Users trying to guess the table records frrom the primary key value</li>\n<li>A rare and extreme situation, your database may ran out of integers, just like it happend to <a href=\"https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352\" target=\"_blank\" rel=\"noopener\">Basecamp</a>.</li>\n</ul>\n<blockquote>\n<p>Read the article <a href=\"http://ronaldbradford.com/blog/bigint-v-int-is-there-a-big-deal-2008-07-18/\" target=\"_blank\" rel=\"noopener\">BIGINT v INT. Is there a big deal?</a></p>\n</blockquote>\n<p>If you want to learn more about the pros and cons of using UUIDs as primary key, here are two blog posts that may enlight you:</p>\n<ul>\n<li><a href=\"https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352\" target=\"_blank\" rel=\"noopener\">UUID or GUID as Primary Keys? Be Careful!</a></li>\n<li><a href=\"https://rclayton.silvrback.com/do-you-really-need-a-uuid-guid\" target=\"_blank\" rel=\"noopener\">Do you really need a UUID/GUID?</a></li>\n</ul>\n<blockquote>\n<p>UUIDs will consume extra space in your database due to the length of each UUID value. Also, keep in mind that indexing a column with a complex value like a UUID may cause performance issues.</p>\n</blockquote>\n<h2 id=\"Using-UUIDs\"><a href=\"#Using-UUIDs\" class=\"headerlink\" title=\"Using UUIDs\"></a>Using UUIDs</h2><p>The Sequelize module has already prebuilt properties that will help define the data type and generate UUIDs in execution time. Let’s procede by refactoring the migration file:</p>\n<h3 id=\"User-migration\"><a href=\"#User-migration\" class=\"headerlink\" title=\"User migration\"></a>User migration</h3><pre><code class=\"javascript\">// Migration\n\n&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<p>In the code above the following changes were made:</p>\n<ul>\n<li>The property <code>autoIncrement</code> was removed. There’s no point in having it since the UUID datatype is not incrementable.</li>\n<li>The property <code>type</code>  received the value <code>Sequelize.UUID</code></li>\n<li>The property <code>defaultValue</code> was added and assigned the value <code>Sequelize.UUIDV4</code>, so every time an <code>INSERT</code> operation is made, Sequelize will take care of the process of generating a new UUID value, on this case, it will use the <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\" target=\"_blank\" rel=\"noopener\">version 4</a>, which is purely random.</li>\n</ul>\n<h3 id=\"User-model\"><a href=\"#User-model\" class=\"headerlink\" title=\"User model\"></a>User model</h3><p>To keep the database base definition consistent across the project codebase, the changes in the migration files need to reflect in the User model file too.</p>\n<pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = (sequelize, DataTypes) =&gt; {\n  const users = sequelize.define(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};</code></pre>\n<p>Just like in the migration file: </p>\n<ul>\n<li>The property <code>autoIncrement</code> was removed</li>\n<li>The <code>type</code> property was changed to UUID, but this time, using the object <code>DataTypes</code> instead of <code>Sequelize</code></li>\n<li>It was added the property <code>defaultValue</code> and it receives the value <code>DataTypes.UUIDV4</code></li>\n</ul>\n<p>That’s all you need to have UUIDs working with Sequelize. </p>\n<h2 id=\"Another-use-cases-for-UUIDs\"><a href=\"#Another-use-cases-for-UUIDs\" class=\"headerlink\" title=\"Another use cases for UUIDs\"></a>Another use cases for UUIDs</h2><p>I have other two use cases for UUIDs as the data type of columns: </p>\n<ul>\n<li><strong>Email account verification</strong>: when a user is created, a unique token is generated so the user can verify his account. In this case, a link with the same token is sent to the user’s mail address, once the user clicks on it, the column holding the token is updated to <code>null</code>.</li>\n<li><strong>Password reset</strong>: when the user resets his password, a mail with a token is sent to his email account. In this case, when the user clicks in the link, if the expiry date is less or equal than the current time, then the column holding the token is set to <code>null</code>. </li>\n</ul>\n<p>For both cases I usually have the following columns:</p>\n<ul>\n<li><code>mailConfirmationToken : UUID</code></li>\n<li><code>passwordResetToken : UUID</code></li>\n<li><code>passwordResetTokenExpiryDate : Date</code></li>\n</ul>\n<h3 id=\"User-migration-1\"><a href=\"#User-migration-1\" class=\"headerlink\" title=\"User migration\"></a>User migration</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n      mailConfirmationToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetTokenExpiryDate: {\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<h3 id=\"User-model-1\"><a href=\"#User-model-1\" class=\"headerlink\" title=\"User model\"></a>User model</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = (sequelize, DataTypes) =&gt; {\n  const users = sequelize.define(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n    mailConfirmationToken: DataTypes.UUID,\n    passwordResetToken: DataTypes.UUID,\n    passwordResetTokenExpiryDate: DataTypes.DATE\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};</code></pre>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/\" target=\"_blank\" rel=\"noopener\">UUIDs are Popular, but Bad for Performance — Let’s Discuss</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\" target=\"_blank\" rel=\"noopener\">Universally unique identifier</a></li>\n<li><a href=\"https://unsplash.com/photos/zFy6fOPZEu0\" target=\"_blank\" rel=\"noopener\">Post cover by Samantha Lam</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>By default sequelize models and migrations are generated with the column <code>id</code> as the primary key, the data type set to <code>INTEGER</code> and, with the option <code>autoIncrement</code> set to <code>true</code>. This means that each row will have a sequential <code>id</code> starting from <code>1</code>.</p>\n<h3 id=\"User-migration-file\"><a href=\"#User-migration-file\" class=\"headerlink\" title=\"User migration file\"></a>User migration file</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<p>This is a classical approach and works perfectly, but when your application needs to expose data to the outside world, for instance, through a REST API, HTTP API or even GraphQL, special attention is required to the <code>id</code> column to avoid common situations like:</p>\n<ul>\n<li>Users trying to guess the table records frrom the primary key value</li>\n<li>A rare and extreme situation, your database may ran out of integers, just like it happend to <a href=\"https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352\" target=\"_blank\" rel=\"noopener\">Basecamp</a>.</li>\n</ul>\n<blockquote>\n<p>Read the article <a href=\"http://ronaldbradford.com/blog/bigint-v-int-is-there-a-big-deal-2008-07-18/\" target=\"_blank\" rel=\"noopener\">BIGINT v INT. Is there a big deal?</a></p>\n</blockquote>\n<p>If you want to learn more about the pros and cons of using UUIDs as primary key, here are two blog posts that may enlight you:</p>\n<ul>\n<li><a href=\"https://medium.com/signal-v-noise/update-on-basecamp-3-being-stuck-in-read-only-as-of-nov-8-9-22am-cst-c41df1a58352\" target=\"_blank\" rel=\"noopener\">UUID or GUID as Primary Keys? Be Careful!</a></li>\n<li><a href=\"https://rclayton.silvrback.com/do-you-really-need-a-uuid-guid\" target=\"_blank\" rel=\"noopener\">Do you really need a UUID/GUID?</a></li>\n</ul>\n<blockquote>\n<p>UUIDs will consume extra space in your database due to the length of each UUID value. Also, keep in mind that indexing a column with a complex value like a UUID may cause performance issues.</p>\n</blockquote>\n<h2 id=\"Using-UUIDs\"><a href=\"#Using-UUIDs\" class=\"headerlink\" title=\"Using UUIDs\"></a>Using UUIDs</h2><p>The Sequelize module has already prebuilt properties that will help define the data type and generate UUIDs in execution time. Let’s procede by refactoring the migration file:</p>\n<h3 id=\"User-migration\"><a href=\"#User-migration\" class=\"headerlink\" title=\"User migration\"></a>User migration</h3><pre><code class=\"javascript\">// Migration\n\n&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<p>In the code above the following changes were made:</p>\n<ul>\n<li>The property <code>autoIncrement</code> was removed. There’s no point in having it since the UUID datatype is not incrementable.</li>\n<li>The property <code>type</code>  received the value <code>Sequelize.UUID</code></li>\n<li>The property <code>defaultValue</code> was added and assigned the value <code>Sequelize.UUIDV4</code>, so every time an <code>INSERT</code> operation is made, Sequelize will take care of the process of generating a new UUID value, on this case, it will use the <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\" target=\"_blank\" rel=\"noopener\">version 4</a>, which is purely random.</li>\n</ul>\n<h3 id=\"User-model\"><a href=\"#User-model\" class=\"headerlink\" title=\"User model\"></a>User model</h3><p>To keep the database base definition consistent across the project codebase, the changes in the migration files need to reflect in the User model file too.</p>\n<pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = (sequelize, DataTypes) =&gt; {\n  const users = sequelize.define(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};</code></pre>\n<p>Just like in the migration file: </p>\n<ul>\n<li>The property <code>autoIncrement</code> was removed</li>\n<li>The <code>type</code> property was changed to UUID, but this time, using the object <code>DataTypes</code> instead of <code>Sequelize</code></li>\n<li>It was added the property <code>defaultValue</code> and it receives the value <code>DataTypes.UUIDV4</code></li>\n</ul>\n<p>That’s all you need to have UUIDs working with Sequelize. </p>\n<h2 id=\"Another-use-cases-for-UUIDs\"><a href=\"#Another-use-cases-for-UUIDs\" class=\"headerlink\" title=\"Another use cases for UUIDs\"></a>Another use cases for UUIDs</h2><p>I have other two use cases for UUIDs as the data type of columns: </p>\n<ul>\n<li><strong>Email account verification</strong>: when a user is created, a unique token is generated so the user can verify his account. In this case, a link with the same token is sent to the user’s mail address, once the user clicks on it, the column holding the token is updated to <code>null</code>.</li>\n<li><strong>Password reset</strong>: when the user resets his password, a mail with a token is sent to his email account. In this case, when the user clicks in the link, if the expiry date is less or equal than the current time, then the column holding the token is set to <code>null</code>. </li>\n</ul>\n<p>For both cases I usually have the following columns:</p>\n<ul>\n<li><code>mailConfirmationToken : UUID</code></li>\n<li><code>passwordResetToken : UUID</code></li>\n<li><code>passwordResetTokenExpiryDate : Date</code></li>\n</ul>\n<h3 id=\"User-migration-1\"><a href=\"#User-migration-1\" class=\"headerlink\" title=\"User migration\"></a>User migration</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = {\n  up: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.createTable(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: Sequelize.UUID,\n        defaultValue: Sequelize.UUIDV4\n      },\n      name: {\n        type: Sequelize.STRING\n      },\n      mailConfirmationToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetToken: {\n        type: Sequelize.UUID\n      },\n      passwordResetTokenExpiryDate: {\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) =&gt; {\n    return queryInterface.dropTable(&#39;users&#39;);\n  }\n};</code></pre>\n<h3 id=\"User-model-1\"><a href=\"#User-model-1\" class=\"headerlink\" title=\"User model\"></a>User model</h3><pre><code class=\"javascript\">&#39;use strict&#39;;\nmodule.exports = (sequelize, DataTypes) =&gt; {\n  const users = sequelize.define(&#39;users&#39;, {\n      id: {\n        allowNull: false,\n        primaryKey: true,\n        type: DataTypes.UUID,\n        defaultValue: DataTypes.UUIDV4\n    },\n    name: DataTypes.STRING,\n    mailConfirmationToken: DataTypes.UUID,\n    passwordResetToken: DataTypes.UUID,\n    passwordResetTokenExpiryDate: DataTypes.DATE\n  }, {});\n  users.associate = function(models) {\n    // associations can be defined here\n  };\n  return users;\n};</code></pre>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.percona.com/blog/2019/11/22/uuids-are-popular-but-bad-for-performance-lets-discuss/\" target=\"_blank\" rel=\"noopener\">UUIDs are Popular, but Bad for Performance — Let’s Discuss</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)\" target=\"_blank\" rel=\"noopener\">Universally unique identifier</a></li>\n<li><a href=\"https://unsplash.com/photos/zFy6fOPZEu0\" target=\"_blank\" rel=\"noopener\">Post cover by Samantha Lam</a> </li>\n</ul>\n"},{"title":"Some views on generics functions | Typescript","date":"2020-07-04T15:25:24.000Z","metatags":"typescript","description":"In this post I talk about Typescript generic functions, I show some practical examples","cover":"blog-images/some-views-on-generic-functions-typescript.jpg","_content":"\nI started learning Typescript at the beginning of 2020 and since I came from Javascript, I became quite comfortable with my skills in this language once I learned how to create interfaces because suddenly I didn't need to use **any** as a type of variables that would receive object literals. I knew Typescript was more powerful than that, and finally, I recently decided to learn more about its features and apply it daily.\n\nI decided to start with Generics.\n\n## What I do understand about Generics\n\nI see generics as a flexible mechanism in Typescript that enables developers to create **reusable components** in the form of functions, classes, interfaces, and types. In this blog post, I will focus exclusively on generic functions.\n\n**A trivial example**\n\n```typescript\nfunction log(content: any): any {\n\treturn content;\n}\n\nlog(3);\nlog(\"Hello hello\");\nlog({ title: \"Generics\" });\n```\n\nThis is a classic example, a function that receives anything and should return something.\n\nAs you can see in the code above, neither the developer nor the application has control over the data type that `log()` is expecting. But, with generics, it's possible to improve the typing situation of the function above by making just a few changes:\n\n```typescript\nfunction log<T>(content: T): T {\n\treturn content;\n}\n\nlog<number>(5);\n// 5\nlog<string>(5);\n// Argument of type '5' is not assignable to parameter of type 'string'.\nlog<string>(\"Log something about generics\");\n// Log something about generics\n```\n\n### Example #1\n\nLet's suppose we have a function to sort an array of objects by prices in ascending order, before learning about generics I would most likely write it using the **any** data type:\n\n```typescript\nfunction sortASC(items: any[]): any[] {\n\treturn [...items].sort((itemA: any, itemB: any) => {\n\t\treturn a.price - b.price;\n\t});\n}\n```\n\nWith this approach, I wouldn't have too much control over the argument data type, and I would lose Typescript's type checking capabilities. With generics, however, it's possible to tackle that and make `sortASC` safer:\n\n```typescript\nfunction sortASC<T extends { price: number; }>(items: T[]): T[] {\n\treturn [...items].sort((itemA: T, itemB: T) => {\n\t\treturn a.price - b.price;\n\t});\n}\n```\n\n> By extending **T** from an interface like I am doing in the code above, I am defining a constraint on **T**, meaning that whatever the interface passed as type, it should obey the interface which **T** extends it's the initial definition.\n\nUsing generics, I am now able to set type when invoking the function. Here is a quick example calling `sortASC` using two different interfaces that follow the constraint `{ price: number; }`:\n\n```typescript\ninterface Vehicle { price: number; cilyinders?: number; }\ninterface Bike { price: number; strokes?: number; }\n\n// Sort an array of vehicles\nsortASC<Vehicle>([{ price: 140000 }, { price: 21000 }]);\n\n// Sort an array of bikes\nsortASC<Bike>([{ price: 15000 }, { price: 12000 }]);\n```\n\n\n\n### Example 2\n\nFor the second example, I will create a function that merges/concatenates two arrays. This function should receive two arrays as arguments, and it should return a single array with the items of both arrays:\n\n```typescript\nfunction arrayMerger(arr1: any, arr2: any): any[] {\n  return [...arr1, ...arr2];\n}\n```\n\nNow, here's how I rewrite it using generics with two types:\n\n```typescript\nfunction arrayMerger<T, U>(arr1: T[], arr2: U[]): (T | U)[]{\n  return [...arr1, ...arr2];\n}\n```\n\nAs you can see, the approach is the same as in the first example, but now with the particularity of having to types **T** and **U** and now, `arrayMerger` expects to return the union type `(T | U)[]` . Here is an example of how I call `arrayMerger` as a generic function strictly passing the types of each array argument:\n\n```typescript\narrayMerger<number, string>(\n  [2001, 2002, 2005],\n  ['Generics', 'Typescript']\n);\n// [2001, 2002, 2005], ['Generics', 'Typescript']\n```\n\n## My last thoughts\n\nFrom my own experience, investing time learning the different ways to apply generics on functions, classes, interfaces, and types is helping me write better Typescript code, and the more I learn about it, the more I know where and how to replace the dirty **anys** on TS code.\n\n## References\n\nPlease read the references I used on my personal studies:\n\n* [Typescript Handbook: Generics](https://www.typescriptlang.org/docs/handbook/generics.html)\n* [Typescript built-in generics](https://fettblog.eu/typescript-built-in-generics/)\n* [Typescript generics tutorial - Ben Awad](https://www.youtube.com/watch?v=nViEqpgwxHE)\n* [Busy TypeScript Developer’s Guide to Advanced TypeScript by Ted Neward](https://www.youtube.com/watch?v=wD5WGkOEJRs)\n\n## Cover by\n\n* [Cover by Miguel A. Amutio](https://unsplash.com/photos/V6SR_VvxAQ0)","source":"_posts/Some-views-on-generic-functions-typescript.md","raw":"---\ntitle: 'Some views on generics functions | Typescript'\ndate: 2020-07-04 16:25:24\nmetatags: typescript\ndescription: In this post I talk about Typescript generic functions, I show some practical examples\ncover: \"blog-images/some-views-on-generic-functions-typescript.jpg\"\n---\n\nI started learning Typescript at the beginning of 2020 and since I came from Javascript, I became quite comfortable with my skills in this language once I learned how to create interfaces because suddenly I didn't need to use **any** as a type of variables that would receive object literals. I knew Typescript was more powerful than that, and finally, I recently decided to learn more about its features and apply it daily.\n\nI decided to start with Generics.\n\n## What I do understand about Generics\n\nI see generics as a flexible mechanism in Typescript that enables developers to create **reusable components** in the form of functions, classes, interfaces, and types. In this blog post, I will focus exclusively on generic functions.\n\n**A trivial example**\n\n```typescript\nfunction log(content: any): any {\n\treturn content;\n}\n\nlog(3);\nlog(\"Hello hello\");\nlog({ title: \"Generics\" });\n```\n\nThis is a classic example, a function that receives anything and should return something.\n\nAs you can see in the code above, neither the developer nor the application has control over the data type that `log()` is expecting. But, with generics, it's possible to improve the typing situation of the function above by making just a few changes:\n\n```typescript\nfunction log<T>(content: T): T {\n\treturn content;\n}\n\nlog<number>(5);\n// 5\nlog<string>(5);\n// Argument of type '5' is not assignable to parameter of type 'string'.\nlog<string>(\"Log something about generics\");\n// Log something about generics\n```\n\n### Example #1\n\nLet's suppose we have a function to sort an array of objects by prices in ascending order, before learning about generics I would most likely write it using the **any** data type:\n\n```typescript\nfunction sortASC(items: any[]): any[] {\n\treturn [...items].sort((itemA: any, itemB: any) => {\n\t\treturn a.price - b.price;\n\t});\n}\n```\n\nWith this approach, I wouldn't have too much control over the argument data type, and I would lose Typescript's type checking capabilities. With generics, however, it's possible to tackle that and make `sortASC` safer:\n\n```typescript\nfunction sortASC<T extends { price: number; }>(items: T[]): T[] {\n\treturn [...items].sort((itemA: T, itemB: T) => {\n\t\treturn a.price - b.price;\n\t});\n}\n```\n\n> By extending **T** from an interface like I am doing in the code above, I am defining a constraint on **T**, meaning that whatever the interface passed as type, it should obey the interface which **T** extends it's the initial definition.\n\nUsing generics, I am now able to set type when invoking the function. Here is a quick example calling `sortASC` using two different interfaces that follow the constraint `{ price: number; }`:\n\n```typescript\ninterface Vehicle { price: number; cilyinders?: number; }\ninterface Bike { price: number; strokes?: number; }\n\n// Sort an array of vehicles\nsortASC<Vehicle>([{ price: 140000 }, { price: 21000 }]);\n\n// Sort an array of bikes\nsortASC<Bike>([{ price: 15000 }, { price: 12000 }]);\n```\n\n\n\n### Example 2\n\nFor the second example, I will create a function that merges/concatenates two arrays. This function should receive two arrays as arguments, and it should return a single array with the items of both arrays:\n\n```typescript\nfunction arrayMerger(arr1: any, arr2: any): any[] {\n  return [...arr1, ...arr2];\n}\n```\n\nNow, here's how I rewrite it using generics with two types:\n\n```typescript\nfunction arrayMerger<T, U>(arr1: T[], arr2: U[]): (T | U)[]{\n  return [...arr1, ...arr2];\n}\n```\n\nAs you can see, the approach is the same as in the first example, but now with the particularity of having to types **T** and **U** and now, `arrayMerger` expects to return the union type `(T | U)[]` . Here is an example of how I call `arrayMerger` as a generic function strictly passing the types of each array argument:\n\n```typescript\narrayMerger<number, string>(\n  [2001, 2002, 2005],\n  ['Generics', 'Typescript']\n);\n// [2001, 2002, 2005], ['Generics', 'Typescript']\n```\n\n## My last thoughts\n\nFrom my own experience, investing time learning the different ways to apply generics on functions, classes, interfaces, and types is helping me write better Typescript code, and the more I learn about it, the more I know where and how to replace the dirty **anys** on TS code.\n\n## References\n\nPlease read the references I used on my personal studies:\n\n* [Typescript Handbook: Generics](https://www.typescriptlang.org/docs/handbook/generics.html)\n* [Typescript built-in generics](https://fettblog.eu/typescript-built-in-generics/)\n* [Typescript generics tutorial - Ben Awad](https://www.youtube.com/watch?v=nViEqpgwxHE)\n* [Busy TypeScript Developer’s Guide to Advanced TypeScript by Ted Neward](https://www.youtube.com/watch?v=wD5WGkOEJRs)\n\n## Cover by\n\n* [Cover by Miguel A. Amutio](https://unsplash.com/photos/V6SR_VvxAQ0)","slug":"Some-views-on-generic-functions-typescript","published":1,"updated":"2020-07-07T19:10:02.598Z","_id":"ckc6vr51l0009u5yyb3su1na4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I started learning Typescript at the beginning of 2020 and since I came from Javascript, I became quite comfortable with my skills in this language once I learned how to create interfaces because suddenly I didn’t need to use <strong>any</strong> as a type of variables that would receive object literals. I knew Typescript was more powerful than that, and finally, I recently decided to learn more about its features and apply it daily.</p>\n<p>I decided to start with Generics.</p>\n<h2 id=\"What-I-do-understand-about-Generics\"><a href=\"#What-I-do-understand-about-Generics\" class=\"headerlink\" title=\"What I do understand about Generics\"></a>What I do understand about Generics</h2><p>I see generics as a flexible mechanism in Typescript that enables developers to create <strong>reusable components</strong> in the form of functions, classes, interfaces, and types. In this blog post, I will focus exclusively on generic functions.</p>\n<p><strong>A trivial example</strong></p>\n<pre><code class=\"typescript\">function log(content: any): any {\n    return content;\n}\n\nlog(3);\nlog(&quot;Hello hello&quot;);\nlog({ title: &quot;Generics&quot; });</code></pre>\n<p>This is a classic example, a function that receives anything and should return something.</p>\n<p>As you can see in the code above, neither the developer nor the application has control over the data type that <code>log()</code> is expecting. But, with generics, it’s possible to improve the typing situation of the function above by making just a few changes:</p>\n<pre><code class=\"typescript\">function log&lt;T&gt;(content: T): T {\n    return content;\n}\n\nlog&lt;number&gt;(5);\n// 5\nlog&lt;string&gt;(5);\n// Argument of type &#39;5&#39; is not assignable to parameter of type &#39;string&#39;.\nlog&lt;string&gt;(&quot;Log something about generics&quot;);\n// Log something about generics</code></pre>\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example #1\"></a>Example #1</h3><p>Let’s suppose we have a function to sort an array of objects by prices in ascending order, before learning about generics I would most likely write it using the <strong>any</strong> data type:</p>\n<pre><code class=\"typescript\">function sortASC(items: any[]): any[] {\n    return [...items].sort((itemA: any, itemB: any) =&gt; {\n        return a.price - b.price;\n    });\n}</code></pre>\n<p>With this approach, I wouldn’t have too much control over the argument data type, and I would lose Typescript’s type checking capabilities. With generics, however, it’s possible to tackle that and make <code>sortASC</code> safer:</p>\n<pre><code class=\"typescript\">function sortASC&lt;T extends { price: number; }&gt;(items: T[]): T[] {\n    return [...items].sort((itemA: T, itemB: T) =&gt; {\n        return a.price - b.price;\n    });\n}</code></pre>\n<blockquote>\n<p>By extending <strong>T</strong> from an interface like I am doing in the code above, I am defining a constraint on <strong>T</strong>, meaning that whatever the interface passed as type, it should obey the interface which <strong>T</strong> extends it’s the initial definition.</p>\n</blockquote>\n<p>Using generics, I am now able to set type when invoking the function. Here is a quick example calling <code>sortASC</code> using two different interfaces that follow the constraint <code>{ price: number; }</code>:</p>\n<pre><code class=\"typescript\">interface Vehicle { price: number; cilyinders?: number; }\ninterface Bike { price: number; strokes?: number; }\n\n// Sort an array of vehicles\nsortASC&lt;Vehicle&gt;([{ price: 140000 }, { price: 21000 }]);\n\n// Sort an array of bikes\nsortASC&lt;Bike&gt;([{ price: 15000 }, { price: 12000 }]);</code></pre>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2\"></a>Example 2</h3><p>For the second example, I will create a function that merges/concatenates two arrays. This function should receive two arrays as arguments, and it should return a single array with the items of both arrays:</p>\n<pre><code class=\"typescript\">function arrayMerger(arr1: any, arr2: any): any[] {\n  return [...arr1, ...arr2];\n}</code></pre>\n<p>Now, here’s how I rewrite it using generics with two types:</p>\n<pre><code class=\"typescript\">function arrayMerger&lt;T, U&gt;(arr1: T[], arr2: U[]): (T | U)[]{\n  return [...arr1, ...arr2];\n}</code></pre>\n<p>As you can see, the approach is the same as in the first example, but now with the particularity of having to types <strong>T</strong> and <strong>U</strong> and now, <code>arrayMerger</code> expects to return the union type <code>(T | U)[]</code> . Here is an example of how I call <code>arrayMerger</code> as a generic function strictly passing the types of each array argument:</p>\n<pre><code class=\"typescript\">arrayMerger&lt;number, string&gt;(\n  [2001, 2002, 2005],\n  [&#39;Generics&#39;, &#39;Typescript&#39;]\n);\n// [2001, 2002, 2005], [&#39;Generics&#39;, &#39;Typescript&#39;]</code></pre>\n<h2 id=\"My-last-thoughts\"><a href=\"#My-last-thoughts\" class=\"headerlink\" title=\"My last thoughts\"></a>My last thoughts</h2><p>From my own experience, investing time learning the different ways to apply generics on functions, classes, interfaces, and types is helping me write better Typescript code, and the more I learn about it, the more I know where and how to replace the dirty <strong>anys</strong> on TS code.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>Please read the references I used on my personal studies:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">Typescript Handbook: Generics</a></li>\n<li><a href=\"https://fettblog.eu/typescript-built-in-generics/\" target=\"_blank\" rel=\"noopener\">Typescript built-in generics</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nViEqpgwxHE\" target=\"_blank\" rel=\"noopener\">Typescript generics tutorial - Ben Awad</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wD5WGkOEJRs\" target=\"_blank\" rel=\"noopener\">Busy TypeScript Developer’s Guide to Advanced TypeScript by Ted Neward</a></li>\n</ul>\n<h2 id=\"Cover-by\"><a href=\"#Cover-by\" class=\"headerlink\" title=\"Cover by\"></a>Cover by</h2><ul>\n<li><a href=\"https://unsplash.com/photos/V6SR_VvxAQ0\" target=\"_blank\" rel=\"noopener\">Cover by Miguel A. Amutio</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>I started learning Typescript at the beginning of 2020 and since I came from Javascript, I became quite comfortable with my skills in this language once I learned how to create interfaces because suddenly I didn’t need to use <strong>any</strong> as a type of variables that would receive object literals. I knew Typescript was more powerful than that, and finally, I recently decided to learn more about its features and apply it daily.</p>\n<p>I decided to start with Generics.</p>\n<h2 id=\"What-I-do-understand-about-Generics\"><a href=\"#What-I-do-understand-about-Generics\" class=\"headerlink\" title=\"What I do understand about Generics\"></a>What I do understand about Generics</h2><p>I see generics as a flexible mechanism in Typescript that enables developers to create <strong>reusable components</strong> in the form of functions, classes, interfaces, and types. In this blog post, I will focus exclusively on generic functions.</p>\n<p><strong>A trivial example</strong></p>\n<pre><code class=\"typescript\">function log(content: any): any {\n    return content;\n}\n\nlog(3);\nlog(&quot;Hello hello&quot;);\nlog({ title: &quot;Generics&quot; });</code></pre>\n<p>This is a classic example, a function that receives anything and should return something.</p>\n<p>As you can see in the code above, neither the developer nor the application has control over the data type that <code>log()</code> is expecting. But, with generics, it’s possible to improve the typing situation of the function above by making just a few changes:</p>\n<pre><code class=\"typescript\">function log&lt;T&gt;(content: T): T {\n    return content;\n}\n\nlog&lt;number&gt;(5);\n// 5\nlog&lt;string&gt;(5);\n// Argument of type &#39;5&#39; is not assignable to parameter of type &#39;string&#39;.\nlog&lt;string&gt;(&quot;Log something about generics&quot;);\n// Log something about generics</code></pre>\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example #1\"></a>Example #1</h3><p>Let’s suppose we have a function to sort an array of objects by prices in ascending order, before learning about generics I would most likely write it using the <strong>any</strong> data type:</p>\n<pre><code class=\"typescript\">function sortASC(items: any[]): any[] {\n    return [...items].sort((itemA: any, itemB: any) =&gt; {\n        return a.price - b.price;\n    });\n}</code></pre>\n<p>With this approach, I wouldn’t have too much control over the argument data type, and I would lose Typescript’s type checking capabilities. With generics, however, it’s possible to tackle that and make <code>sortASC</code> safer:</p>\n<pre><code class=\"typescript\">function sortASC&lt;T extends { price: number; }&gt;(items: T[]): T[] {\n    return [...items].sort((itemA: T, itemB: T) =&gt; {\n        return a.price - b.price;\n    });\n}</code></pre>\n<blockquote>\n<p>By extending <strong>T</strong> from an interface like I am doing in the code above, I am defining a constraint on <strong>T</strong>, meaning that whatever the interface passed as type, it should obey the interface which <strong>T</strong> extends it’s the initial definition.</p>\n</blockquote>\n<p>Using generics, I am now able to set type when invoking the function. Here is a quick example calling <code>sortASC</code> using two different interfaces that follow the constraint <code>{ price: number; }</code>:</p>\n<pre><code class=\"typescript\">interface Vehicle { price: number; cilyinders?: number; }\ninterface Bike { price: number; strokes?: number; }\n\n// Sort an array of vehicles\nsortASC&lt;Vehicle&gt;([{ price: 140000 }, { price: 21000 }]);\n\n// Sort an array of bikes\nsortASC&lt;Bike&gt;([{ price: 15000 }, { price: 12000 }]);</code></pre>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2\"></a>Example 2</h3><p>For the second example, I will create a function that merges/concatenates two arrays. This function should receive two arrays as arguments, and it should return a single array with the items of both arrays:</p>\n<pre><code class=\"typescript\">function arrayMerger(arr1: any, arr2: any): any[] {\n  return [...arr1, ...arr2];\n}</code></pre>\n<p>Now, here’s how I rewrite it using generics with two types:</p>\n<pre><code class=\"typescript\">function arrayMerger&lt;T, U&gt;(arr1: T[], arr2: U[]): (T | U)[]{\n  return [...arr1, ...arr2];\n}</code></pre>\n<p>As you can see, the approach is the same as in the first example, but now with the particularity of having to types <strong>T</strong> and <strong>U</strong> and now, <code>arrayMerger</code> expects to return the union type <code>(T | U)[]</code> . Here is an example of how I call <code>arrayMerger</code> as a generic function strictly passing the types of each array argument:</p>\n<pre><code class=\"typescript\">arrayMerger&lt;number, string&gt;(\n  [2001, 2002, 2005],\n  [&#39;Generics&#39;, &#39;Typescript&#39;]\n);\n// [2001, 2002, 2005], [&#39;Generics&#39;, &#39;Typescript&#39;]</code></pre>\n<h2 id=\"My-last-thoughts\"><a href=\"#My-last-thoughts\" class=\"headerlink\" title=\"My last thoughts\"></a>My last thoughts</h2><p>From my own experience, investing time learning the different ways to apply generics on functions, classes, interfaces, and types is helping me write better Typescript code, and the more I learn about it, the more I know where and how to replace the dirty <strong>anys</strong> on TS code.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>Please read the references I used on my personal studies:</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\" target=\"_blank\" rel=\"noopener\">Typescript Handbook: Generics</a></li>\n<li><a href=\"https://fettblog.eu/typescript-built-in-generics/\" target=\"_blank\" rel=\"noopener\">Typescript built-in generics</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nViEqpgwxHE\" target=\"_blank\" rel=\"noopener\">Typescript generics tutorial - Ben Awad</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wD5WGkOEJRs\" target=\"_blank\" rel=\"noopener\">Busy TypeScript Developer’s Guide to Advanced TypeScript by Ted Neward</a></li>\n</ul>\n<h2 id=\"Cover-by\"><a href=\"#Cover-by\" class=\"headerlink\" title=\"Cover by\"></a>Cover by</h2><ul>\n<li><a href=\"https://unsplash.com/photos/V6SR_VvxAQ0\" target=\"_blank\" rel=\"noopener\">Cover by Miguel A. Amutio</a></li>\n</ul>\n"},{"title":"Using SASS variables inside vue components","date":"2020-01-22T22:06:00.000Z","metatags":"vuejs, sass","description":"Learn how to use SASS variables inside vue components.","cover":"blog-images/using-sass-variables-inside-vue-components.png","_content":"\n[SASS](https://sass-lang.com/) is one of the first CSS [preprocessors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor), it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.\n\nOne of SASS's coolest feature is the ability to assign values to [variables](https://sass-lang.com/documentation/variables) and then re-use it along with the project, the variables can live on a different file and be accessed by `@import './_file-were-variables-were-defined.scss'`. This also happens when you choose to use SASS on a [Vue](https://vuejs.org/) based project, but, as long as you access the variables on `.scss` or `.sass` files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, [node-sass](https://www.npmjs.com/package/node-sass?activeTab=versions) will return an error like this:\n\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n## Why does this happen?\n\n- In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.\n- SASS variables are not CSS variables, which means that after `node-sass` processes SASS files, the variables will no longer exist in the output file because `node-sass` replaces it with the real values.\n\n## How to fix this issue?\n\nUnder the hood of Vue's cli, there is webpack handling all the `.vue`, `.sass`, `.scss`, `.js` files. [Webpack](https://webpack.js.org/) with its [plugins](https://webpack.js.org/plugins/) does a series of transformations to generate plain `html`, `css` and `javascript`.\n\nThe plugin responsible to handle SASS files on webpack is [sass-loader](https://github.com/webpack-contrib/sass-loader), and on its options object it's possible to pass the `prependData` in order to share variables globally. It includes\n\n- Other .sass or .scss files\n- Style blocks defined inside Vuejs components.\n\nTo add the `prependData` option edit the `vue.config.js` file located in the root of your vuejs project generated with the Vue cli, if it doesn't exist you can create one. After that, edit or add the code below:\n\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\nIn the code above are the configurations for the node-sass plugin running on webpack. The `prependData` property receives a string with a SASS declaration importing the `sass` files where I defined the global variables. After that, you should be able to reference variables inside of your `.vue` components.\n\n## Acknowledgments\n\nI've been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.\n\n- [Natalie Weizenbaum](https://github.com/nex3)\n- [Chris Eppstein](https://github.com/chriseppstein)\n- [Hampton Catlin](https://github.com/hcatlin)\n- [Open source contributors: node-sass](https://github.com/sass/node-sass/graphs/contributors)\n- [Open source contributors: sass](https://github.com/sass/sass/graphs/contributors)\n\n## References\n\n- [sass-loader](https://webpack.js.org/loaders/sass-loader/)\n- [Sharing Global Variables](https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables)\n- [Post cover by: XiaoXiao Sun](https://unsplash.com/photos/e8e4YY65sOk)\n","source":"_posts/Using-SASS-variables-inside-vue-components.md","raw":"---\ntitle: Using SASS variables inside vue components\ndate: 2020-01-22 22:06:00\nmetatags: vuejs, sass\ndescription: Learn how to use SASS variables inside vue components.\ncover: \"blog-images/using-sass-variables-inside-vue-components.png\"\n---\n\n[SASS](https://sass-lang.com/) is one of the first CSS [preprocessors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor), it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.\n\nOne of SASS's coolest feature is the ability to assign values to [variables](https://sass-lang.com/documentation/variables) and then re-use it along with the project, the variables can live on a different file and be accessed by `@import './_file-were-variables-were-defined.scss'`. This also happens when you choose to use SASS on a [Vue](https://vuejs.org/) based project, but, as long as you access the variables on `.scss` or `.sass` files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, [node-sass](https://www.npmjs.com/package/node-sass?activeTab=versions) will return an error like this:\n\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n## Why does this happen?\n\n- In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.\n- SASS variables are not CSS variables, which means that after `node-sass` processes SASS files, the variables will no longer exist in the output file because `node-sass` replaces it with the real values.\n\n## How to fix this issue?\n\nUnder the hood of Vue's cli, there is webpack handling all the `.vue`, `.sass`, `.scss`, `.js` files. [Webpack](https://webpack.js.org/) with its [plugins](https://webpack.js.org/plugins/) does a series of transformations to generate plain `html`, `css` and `javascript`.\n\nThe plugin responsible to handle SASS files on webpack is [sass-loader](https://github.com/webpack-contrib/sass-loader), and on its options object it's possible to pass the `prependData` in order to share variables globally. It includes\n\n- Other .sass or .scss files\n- Style blocks defined inside Vuejs components.\n\nTo add the `prependData` option edit the `vue.config.js` file located in the root of your vuejs project generated with the Vue cli, if it doesn't exist you can create one. After that, edit or add the code below:\n\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\nIn the code above are the configurations for the node-sass plugin running on webpack. The `prependData` property receives a string with a SASS declaration importing the `sass` files where I defined the global variables. After that, you should be able to reference variables inside of your `.vue` components.\n\n## Acknowledgments\n\nI've been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.\n\n- [Natalie Weizenbaum](https://github.com/nex3)\n- [Chris Eppstein](https://github.com/chriseppstein)\n- [Hampton Catlin](https://github.com/hcatlin)\n- [Open source contributors: node-sass](https://github.com/sass/node-sass/graphs/contributors)\n- [Open source contributors: sass](https://github.com/sass/sass/graphs/contributors)\n\n## References\n\n- [sass-loader](https://webpack.js.org/loaders/sass-loader/)\n- [Sharing Global Variables](https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables)\n- [Post cover by: XiaoXiao Sun](https://unsplash.com/photos/e8e4YY65sOk)\n","slug":"Using-SASS-variables-inside-vue-components","published":1,"updated":"2020-06-28T15:22:56.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc6vr51m000au5yy52pk5x3j","content":"<p><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS</a> is one of the first CSS <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\" target=\"_blank\" rel=\"noopener\">preprocessors</a>, it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.</p>\n<p>One of SASS’s coolest feature is the ability to assign values to <a href=\"https://sass-lang.com/documentation/variables\" target=\"_blank\" rel=\"noopener\">variables</a> and then re-use it along with the project, the variables can live on a different file and be accessed by <code>@import &#39;./_file-were-variables-were-defined.scss&#39;</code>. This also happens when you choose to use SASS on a <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> based project, but, as long as you access the variables on <code>.scss</code> or <code>.sass</code> files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, <a href=\"https://www.npmjs.com/package/node-sass?activeTab=versions\" target=\"_blank\" rel=\"noopener\">node-sass</a> will return an error like this:</p>\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n<h2 id=\"Why-does-this-happen\"><a href=\"#Why-does-this-happen\" class=\"headerlink\" title=\"Why does this happen?\"></a>Why does this happen?</h2><ul>\n<li>In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.</li>\n<li>SASS variables are not CSS variables, which means that after <code>node-sass</code> processes SASS files, the variables will no longer exist in the output file because <code>node-sass</code> replaces it with the real values.</li>\n</ul>\n<h2 id=\"How-to-fix-this-issue\"><a href=\"#How-to-fix-this-issue\" class=\"headerlink\" title=\"How to fix this issue?\"></a>How to fix this issue?</h2><p>Under the hood of Vue’s cli, there is webpack handling all the <code>.vue</code>, <code>.sass</code>, <code>.scss</code>, <code>.js</code> files. <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> with its <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> does a series of transformations to generate plain <code>html</code>, <code>css</code> and <code>javascript</code>.</p>\n<p>The plugin responsible to handle SASS files on webpack is <a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a>, and on its options object it’s possible to pass the <code>prependData</code> in order to share variables globally. It includes</p>\n<ul>\n<li>Other .sass or .scss files</li>\n<li>Style blocks defined inside Vuejs components.</li>\n</ul>\n<p>To add the <code>prependData</code> option edit the <code>vue.config.js</code> file located in the root of your vuejs project generated with the Vue cli, if it doesn’t exist you can create one. After that, edit or add the code below:</p>\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\n<p>In the code above are the configurations for the node-sass plugin running on webpack. The <code>prependData</code> property receives a string with a SASS declaration importing the <code>sass</code> files where I defined the global variables. After that, you should be able to reference variables inside of your <code>.vue</code> components.</p>\n<h2 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h2><p>I’ve been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.</p>\n<ul>\n<li><a href=\"https://github.com/nex3\" target=\"_blank\" rel=\"noopener\">Natalie Weizenbaum</a></li>\n<li><a href=\"https://github.com/chriseppstein\" target=\"_blank\" rel=\"noopener\">Chris Eppstein</a></li>\n<li><a href=\"https://github.com/hcatlin\" target=\"_blank\" rel=\"noopener\">Hampton Catlin</a></li>\n<li><a href=\"https://github.com/sass/node-sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: node-sass</a></li>\n<li><a href=\"https://github.com/sass/sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: sass</a></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://webpack.js.org/loaders/sass-loader/\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables\" target=\"_blank\" rel=\"noopener\">Sharing Global Variables</a></li>\n<li><a href=\"https://unsplash.com/photos/e8e4YY65sOk\" target=\"_blank\" rel=\"noopener\">Post cover by: XiaoXiao Sun</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS</a> is one of the first CSS <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\" target=\"_blank\" rel=\"noopener\">preprocessors</a>, it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.</p>\n<p>One of SASS’s coolest feature is the ability to assign values to <a href=\"https://sass-lang.com/documentation/variables\" target=\"_blank\" rel=\"noopener\">variables</a> and then re-use it along with the project, the variables can live on a different file and be accessed by <code>@import &#39;./_file-were-variables-were-defined.scss&#39;</code>. This also happens when you choose to use SASS on a <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> based project, but, as long as you access the variables on <code>.scss</code> or <code>.sass</code> files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, <a href=\"https://www.npmjs.com/package/node-sass?activeTab=versions\" target=\"_blank\" rel=\"noopener\">node-sass</a> will return an error like this:</p>\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n<h2 id=\"Why-does-this-happen\"><a href=\"#Why-does-this-happen\" class=\"headerlink\" title=\"Why does this happen?\"></a>Why does this happen?</h2><ul>\n<li>In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.</li>\n<li>SASS variables are not CSS variables, which means that after <code>node-sass</code> processes SASS files, the variables will no longer exist in the output file because <code>node-sass</code> replaces it with the real values.</li>\n</ul>\n<h2 id=\"How-to-fix-this-issue\"><a href=\"#How-to-fix-this-issue\" class=\"headerlink\" title=\"How to fix this issue?\"></a>How to fix this issue?</h2><p>Under the hood of Vue’s cli, there is webpack handling all the <code>.vue</code>, <code>.sass</code>, <code>.scss</code>, <code>.js</code> files. <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> with its <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> does a series of transformations to generate plain <code>html</code>, <code>css</code> and <code>javascript</code>.</p>\n<p>The plugin responsible to handle SASS files on webpack is <a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a>, and on its options object it’s possible to pass the <code>prependData</code> in order to share variables globally. It includes</p>\n<ul>\n<li>Other .sass or .scss files</li>\n<li>Style blocks defined inside Vuejs components.</li>\n</ul>\n<p>To add the <code>prependData</code> option edit the <code>vue.config.js</code> file located in the root of your vuejs project generated with the Vue cli, if it doesn’t exist you can create one. After that, edit or add the code below:</p>\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\n<p>In the code above are the configurations for the node-sass plugin running on webpack. The <code>prependData</code> property receives a string with a SASS declaration importing the <code>sass</code> files where I defined the global variables. After that, you should be able to reference variables inside of your <code>.vue</code> components.</p>\n<h2 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h2><p>I’ve been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.</p>\n<ul>\n<li><a href=\"https://github.com/nex3\" target=\"_blank\" rel=\"noopener\">Natalie Weizenbaum</a></li>\n<li><a href=\"https://github.com/chriseppstein\" target=\"_blank\" rel=\"noopener\">Chris Eppstein</a></li>\n<li><a href=\"https://github.com/hcatlin\" target=\"_blank\" rel=\"noopener\">Hampton Catlin</a></li>\n<li><a href=\"https://github.com/sass/node-sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: node-sass</a></li>\n<li><a href=\"https://github.com/sass/sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: sass</a></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://webpack.js.org/loaders/sass-loader/\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables\" target=\"_blank\" rel=\"noopener\">Sharing Global Variables</a></li>\n<li><a href=\"https://unsplash.com/photos/e8e4YY65sOk\" target=\"_blank\" rel=\"noopener\">Post cover by: XiaoXiao Sun</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}