{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/firminocustomtheme/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/main.sass","path":"css/main.sass","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/firminochangani.png","path":"img/firminochangani.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/concurrent.gif","path":"blog-images/concurrent.gif","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/img/me.jpg","path":"img/me.jpg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/non-concurrent.gif","path":"blog-images/non-concurrent.gif","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/urlfy.xyz.png","path":"blog-images/urlfy.xyz.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/using-sass-variables-inside-vue-components.png","path":"blog-images/using-sass-variables-inside-vue-components.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/Executing-concurrent-HTTP-requests.png","path":"blog-images/Executing-concurrent-HTTP-requests.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","path":"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","modified":0,"renderable":1},{"_id":"themes/firminocustomtheme/source/blog-images/comparing-objectids.jpg","path":"blog-images/comparing-objectids.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/firminocustomtheme/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1577806895866},{"_id":"themes/firminocustomtheme/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1577806895868},{"_id":"themes/firminocustomtheme/README.md","hash":"4cd14dd17c22ce6ae75287ae30050d062a48e836","modified":1577806895867},{"_id":"themes/firminocustomtheme/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1577806895872},{"_id":"source/_posts/Comparing-MongoDB-ObjectIds.md","hash":"db4c1a91898f77564a6214450174420b90478bbb","modified":1580148596886},{"_id":"source/_posts/Building-URLFY-The-idea.md","hash":"c631299f03ca0cfe19a91808b0a1b7ae1e2879ce","modified":1577969742529},{"_id":"source/_posts/Executing-concurrent-HTTP-requests.md","hash":"d8b3488aa72aced7dc72291360f007cd5f84a48d","modified":1577808477045},{"_id":"source/_posts/MongoDB-Mongoose-minimal-offset-based-pagination.md","hash":"cb94c31faf21f273f795a3c454d140f80ca99590","modified":1579385893807},{"_id":"source/_posts/Using-SASS-variables-inside-vue-components.md","hash":"ddcc1b90a79ffa666916c02e0fd731d5a95ddbea","modified":1579731129842},{"_id":"themes/firminocustomtheme/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1577806895868},{"_id":"themes/firminocustomtheme/languages/pt.yml","hash":"10ac1e67cd67db2f2ba8caf82fdd5e1042bac037","modified":1577806895869},{"_id":"themes/firminocustomtheme/layout/index.pug","hash":"07e106c2a1bd7cb6d8c6f2cd5b8e21908e298db3","modified":1579733551327},{"_id":"themes/firminocustomtheme/layout/post.pug","hash":"3e47b51ff87552f55a5506a97c032e32648682f6","modified":1579733277338},{"_id":"themes/firminocustomtheme/source/js/script.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579733547165},{"_id":"themes/firminocustomtheme/layout/partial/about.pug","hash":"38e6d2f06011344867804e77cb577ad4e32acade","modified":1579395743497},{"_id":"themes/firminocustomtheme/layout/partial/disqus.pug","hash":"b1f4cbff6e02fdf580da316cd2ac3fd24fdee659","modified":1579386774298},{"_id":"themes/firminocustomtheme/layout/partial/footer.pug","hash":"bc20d84c3825d9be0e082cff72217f1ee600feeb","modified":1579386746370},{"_id":"themes/firminocustomtheme/layout/partial/header.pug","hash":"94a482c972e9ae2cfdb6fa3c30fc1c4b7ba7e784","modified":1579396858115},{"_id":"themes/firminocustomtheme/source/css/main.sass","hash":"d220da88d0197519878d005bf3c26dc41db8d217","modified":1579732973642},{"_id":"themes/firminocustomtheme/source/img/favicon.png","hash":"24a69506b188a8519fb758abb3cc7a653afcb021","modified":1579038533245},{"_id":"themes/firminocustomtheme/source/img/firminochangani.png","hash":"8dff31c410dcc6ffcb483092fd7d1bc656115fae","modified":1579039053682},{"_id":"themes/firminocustomtheme/source/blog-images/concurrent.gif","hash":"e3858c8db8c29eb9ac35a535a9f3230cc29d95ac","modified":1577806895873},{"_id":"themes/firminocustomtheme/source/img/me.jpg","hash":"79b37a4f30dc483f7f381382cda4edc1b0606385","modified":1579387188516},{"_id":"themes/firminocustomtheme/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1577806895874},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1577806895874},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1577806895876},{"_id":"themes/firminocustomtheme/source/css/partials/_about-me.sass","hash":"047e0ed82e0b3835fe8124a17995d84f01121717","modified":1579603312271},{"_id":"themes/firminocustomtheme/source/css/partials/_variables.sass","hash":"102baf696dedf3327eb0ea0ca980a3f0e79c482c","modified":1577806895877},{"_id":"themes/firminocustomtheme/source/css/partials/_post.sass","hash":"771aed2077483307c1c7844c6a2cf946943ca554","modified":1580137362569},{"_id":"themes/firminocustomtheme/source/blog-images/non-concurrent.gif","hash":"2eaabdc42285d206316253a093efcf9afb0ce3dc","modified":1577806895873},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1577806895875},{"_id":"themes/firminocustomtheme/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1577806895875},{"_id":"themes/firminocustomtheme/source/blog-images/urlfy.xyz.png","hash":"24195ec06229d3d9bc3a0ec3739e55dda7bbc03a","modified":1577969153302},{"_id":"themes/firminocustomtheme/source/blog-images/using-sass-variables-inside-vue-components.png","hash":"8a2c50acc56d2974cb376a1505c1fa1922463907","modified":1579729102198},{"_id":"themes/firminocustomtheme/source/blog-images/Executing-concurrent-HTTP-requests.png","hash":"aa9bd5c790d567d9ccd9fe07f9c624c463246ee7","modified":1577808394817},{"_id":"themes/firminocustomtheme/source/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","hash":"4198bc511091ff3eac6dc5cad9d87d45fda7f1ae","modified":1579044344430},{"_id":"themes/firminocustomtheme/source/blog-images/comparing-objectids.jpg","hash":"6cb2c590d72061b5c864ccc5dfc433e5df59ac20","modified":1580136622502},{"_id":"public/2020/01/27/Comparing-MongoDB-ObjectIds/index.html","hash":"75b502314e0031a9c8a281545e55f29238feaf38","modified":1580148609185},{"_id":"public/2020/01/22/Using-SASS-variables-inside-vue-components/index.html","hash":"84e27ba8a903e6c521fd27def13a5a7d289be3c1","modified":1580148609185},{"_id":"public/2020/01/14/MongoDB-Mongoose-minimal-offset-based-pagination/index.html","hash":"1afd1951d31c76f056ec194ec9364d38dab7058e","modified":1580148609185},{"_id":"public/2020/01/02/Building-URLFY-The-idea/index.html","hash":"d6cdcc374b6557bdcb519230b2c115ebf62a6569","modified":1580148609185},{"_id":"public/2019/12/22/Executing-concurrent-HTTP-requests/index.html","hash":"daa315949ea5871beaed35f05f617775b7622e91","modified":1580148609185},{"_id":"public/archives/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/archives/2019/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/archives/2019/12/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/archives/2020/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/archives/2020/01/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/tags/urlfy-shortening-idea-projects/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/tags/javascript-nodejs-asynchronous-programming-promises-concurrency/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/tags/mongodb-express-nodejs-pagination-offset/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/tags/vuejs-sass/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/tags/mongodb/index.html","hash":"ec9ecc587f67c33c722438eed189a834d4f45a6b","modified":1580148609185},{"_id":"public/img/favicon.png","hash":"24a69506b188a8519fb758abb3cc7a653afcb021","modified":1580148609185},{"_id":"public/img/firminochangani.png","hash":"8dff31c410dcc6ffcb483092fd7d1bc656115fae","modified":1580148609185},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1580148609185},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1580148609185},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1580148609185},{"_id":"public/blog-images/concurrent.gif","hash":"e3858c8db8c29eb9ac35a535a9f3230cc29d95ac","modified":1580148609185},{"_id":"public/img/me.jpg","hash":"79b37a4f30dc483f7f381382cda4edc1b0606385","modified":1580148609185},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1580148609185},{"_id":"public/blog-images/comparing-objectids.jpg","hash":"6cb2c590d72061b5c864ccc5dfc433e5df59ac20","modified":1580148609185},{"_id":"public/js/script.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1580148609185},{"_id":"public/css/main.css","hash":"f9c1d4978e2d06e98d9bfb99e24f61c1518cae82","modified":1580148609185},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1580148609185},{"_id":"public/blog-images/non-concurrent.gif","hash":"2eaabdc42285d206316253a093efcf9afb0ce3dc","modified":1580148609185},{"_id":"public/blog-images/urlfy.xyz.png","hash":"24195ec06229d3d9bc3a0ec3739e55dda7bbc03a","modified":1580148609185},{"_id":"public/blog-images/using-sass-variables-inside-vue-components.png","hash":"8a2c50acc56d2974cb376a1505c1fa1922463907","modified":1580148609185},{"_id":"public/blog-images/Executing-concurrent-HTTP-requests.png","hash":"aa9bd5c790d567d9ccd9fe07f9c624c463246ee7","modified":1580148609185},{"_id":"public/blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","hash":"4198bc511091ff3eac6dc5cad9d87d45fda7f1ae","modified":1580148609185}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Comparing MongoDB ObjectIds","date":"2020-01-27T13:15:53.000Z","description":"Understand what is an ObjectId and how you can compare two ObjectIds without unexpected behaviors.","cover":"blog-images/comparing-objectids.jpg","_content":"\nIn MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property `_id` of each document inside of a collection.\n\n> TL;DR\n>\n> ObjectIds can be effectively compared using the `ObjectId().equals()` method.\n\n**Here is an example**\n\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\nThe string `5e2ed1b83f98e15f9799bfd2` is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.\n\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n**What's happening in the code above?**\n\nTwo ids are being created with the same string that obeys the ObjectId format `5e2ed3bb8f6ee86b8d4d21b7`. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:\n\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\nAnd then, in the next line, when a comparison between the two ObjectId is made, the terminal prints `false`.\n\nIf you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an `Object`, despite the fact they print a string when logged.\n\n## The proper way to compare ObjectId's\n\nEach ObjectId object has a method called `.equals()`, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the `.equals()` has been called.\n\n**Example**\n\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n## References\n\n- [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/)\n- [Post cover by Trust \"Tru\" Katsande](https://unsplash.com/photos/xcneHTn8DUI)\n","source":"_posts/Comparing-MongoDB-ObjectIds.md","raw":"---\ntitle: Comparing MongoDB ObjectIds\ndate: 2020-01-27 13:15:53\ntags: mongodb\ndescription: Understand what is an ObjectId and how you can compare two ObjectIds without unexpected behaviors.\ncover: \"blog-images/comparing-objectids.jpg\"\n---\n\nIn MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property `_id` of each document inside of a collection.\n\n> TL;DR\n>\n> ObjectIds can be effectively compared using the `ObjectId().equals()` method.\n\n**Here is an example**\n\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\nThe string `5e2ed1b83f98e15f9799bfd2` is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.\n\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n**What's happening in the code above?**\n\nTwo ids are being created with the same string that obeys the ObjectId format `5e2ed3bb8f6ee86b8d4d21b7`. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:\n\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\nAnd then, in the next line, when a comparison between the two ObjectId is made, the terminal prints `false`.\n\nIf you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an `Object`, despite the fact they print a string when logged.\n\n## The proper way to compare ObjectId's\n\nEach ObjectId object has a method called `.equals()`, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the `.equals()` has been called.\n\n**Example**\n\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n## References\n\n- [ObjectId](https://docs.mongodb.com/manual/reference/method/ObjectId/)\n- [Post cover by Trust \"Tru\" Katsande](https://unsplash.com/photos/xcneHTn8DUI)\n","slug":"Comparing-MongoDB-ObjectIds","published":1,"updated":"2020-01-27T18:09:56.886Z","_id":"ck5wh85fj000039126ikn41s5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property <code>_id</code> of each document inside of a collection.</p>\n<blockquote>\n<p>TL;DR</p>\n<p>ObjectIds can be effectively compared using the <code>ObjectId().equals()</code> method.</p>\n</blockquote>\n<p><strong>Here is an example</strong></p>\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\n<p>The string <code>5e2ed1b83f98e15f9799bfd2</code> is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.</p>\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n<p><strong>What’s happening in the code above?</strong></p>\n<p>Two ids are being created with the same string that obeys the ObjectId format <code>5e2ed3bb8f6ee86b8d4d21b7</code>. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:</p>\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\n<p>And then, in the next line, when a comparison between the two ObjectId is made, the terminal prints <code>false</code>.</p>\n<p>If you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an <code>Object</code>, despite the fact they print a string when logged.</p>\n<h2 id=\"The-proper-way-to-compare-ObjectId’s\"><a href=\"#The-proper-way-to-compare-ObjectId’s\" class=\"headerlink\" title=\"The proper way to compare ObjectId’s\"></a>The proper way to compare ObjectId’s</h2><p>Each ObjectId object has a method called <code>.equals()</code>, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the <code>.equals()</code> has been called.</p>\n<p><strong>Example</strong></p>\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.mongodb.com/manual/reference/method/ObjectId/\" target=\"_blank\" rel=\"noopener\">ObjectId</a></li>\n<li><a href=\"https://unsplash.com/photos/xcneHTn8DUI\" target=\"_blank\" rel=\"noopener\">Post cover by Trust “Tru” Katsande</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>In MongoDB, the ObjectId is a data type and also a method used to generate unique strings. These strings are usually used as the value of the property <code>_id</code> of each document inside of a collection.</p>\n<blockquote>\n<p>TL;DR</p>\n<p>ObjectIds can be effectively compared using the <code>ObjectId().equals()</code> method.</p>\n</blockquote>\n<p><strong>Here is an example</strong></p>\n<script src=\"https://gist.github.com/flowck/79bfe0cd7be2ebfc4a59dbf0ad0a3ce7.js\"></script>\n\n<p>The string <code>5e2ed1b83f98e15f9799bfd2</code> is an ObjectId, even though its represented as a regular string. Any attempt of a comparison between two ObjectIds would return false.</p>\n<script src=\"https://gist.github.com/flowck/5aa176a5ed11373ffc3686ac91b6f0b3.js\"></script>\n\n<p><strong>What’s happening in the code above?</strong></p>\n<p>Two ids are being created with the same string that obeys the ObjectId format <code>5e2ed3bb8f6ee86b8d4d21b7</code>. In the lines bellow, both constants holding the ObjectId values are printed. If you execute the script above, you will see that the terminal will print the same string twice:</p>\n<script src=\"https://gist.github.com/flowck/a9ea4c4c1ec73fc0f60f3302a350fcf3.js\"></script>\n\n<p>And then, in the next line, when a comparison between the two ObjectId is made, the terminal prints <code>false</code>.</p>\n<p>If you pay attention more closely, you will see that a comparison between the two ObjectIds would not be possible, because both constants are holding an <code>Object</code>, despite the fact they print a string when logged.</p>\n<h2 id=\"The-proper-way-to-compare-ObjectId’s\"><a href=\"#The-proper-way-to-compare-ObjectId’s\" class=\"headerlink\" title=\"The proper way to compare ObjectId’s\"></a>The proper way to compare ObjectId’s</h2><p>Each ObjectId object has a method called <code>.equals()</code>, this method receives another ObjectId object as an argument and then compares its value to the value of the ObjectId where the <code>.equals()</code> has been called.</p>\n<p><strong>Example</strong></p>\n<script src=\"https://gist.github.com/flowck/fa672aba33a81a37737026e4d4faa312.js\"></script>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://docs.mongodb.com/manual/reference/method/ObjectId/\" target=\"_blank\" rel=\"noopener\">ObjectId</a></li>\n<li><a href=\"https://unsplash.com/photos/xcneHTn8DUI\" target=\"_blank\" rel=\"noopener\">Post cover by Trust “Tru” Katsande</a></li>\n</ul>\n"},{"title":"Building URLFY - The idea","date":"2020-01-02T12:21:08.000Z","description":"On this blog post I explain how I came out with the idea of building a shortening service","cover":"blog-images/urlfy.xyz.png","_content":"\nI was studying system design during the Christmas holidays of 2019, and while reading a blog [post](https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444), I found a challenge that quickly caught my attention: \n\n>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?\n\nThat sounded like a very simple web application, but then, in the same blog post, a few questions where also made:\n\n>How to generate a unique ID for each URL?\n>How would you generate unique IDs at scale (thousands of URL shortening >requests coming every second)?\n>How would your service handle redirects?\n>How would you support custom short URLs?\n>How to delete expired URLs etc?\n>How to track click stats?\n\nAfter reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.\n\n![Urlfy](/blog/blog-images/urlfy.xyz.png)\n\nLong story short, I ended building something which a call [Ulrfy.xyz](https://app.urlfy.xyz), a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello [board](https://trello.com/b/YZDrArI2/urlfyxyz) where I manage my backlog is open for the public.\n\nThis was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.","source":"_posts/Building-URLFY-The-idea.md","raw":"---\ntitle: Building URLFY - The idea\ndate: 2020-01-02 12:21:08\ntags: urlfy, shortening, idea, projects\ndescription: On this blog post I explain how I came out with the idea of building a shortening service\ncover: \"blog-images/urlfy.xyz.png\"\n---\n\nI was studying system design during the Christmas holidays of 2019, and while reading a blog [post](https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444), I found a challenge that quickly caught my attention: \n\n>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?\n\nThat sounded like a very simple web application, but then, in the same blog post, a few questions where also made:\n\n>How to generate a unique ID for each URL?\n>How would you generate unique IDs at scale (thousands of URL shortening >requests coming every second)?\n>How would your service handle redirects?\n>How would you support custom short URLs?\n>How to delete expired URLs etc?\n>How to track click stats?\n\nAfter reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.\n\n![Urlfy](/blog/blog-images/urlfy.xyz.png)\n\nLong story short, I ended building something which a call [Ulrfy.xyz](https://app.urlfy.xyz), a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello [board](https://trello.com/b/YZDrArI2/urlfyxyz) where I manage my backlog is open for the public.\n\nThis was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.","slug":"Building-URLFY-The-idea","published":1,"updated":"2020-01-02T12:55:42.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5wh85g4000139124oi26zgm","content":"<p>I was studying system design during the Christmas holidays of 2019, and while reading a blog <a href=\"https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444\" target=\"_blank\" rel=\"noopener\">post</a>, I found a challenge that quickly caught my attention: </p>\n<blockquote>\n<p>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?</p>\n</blockquote>\n<p>That sounded like a very simple web application, but then, in the same blog post, a few questions where also made:</p>\n<blockquote>\n<p>How to generate a unique ID for each URL?<br>How would you generate unique IDs at scale (thousands of URL shortening &gt;requests coming every second)?<br>How would your service handle redirects?<br>How would you support custom short URLs?<br>How to delete expired URLs etc?<br>How to track click stats?</p>\n</blockquote>\n<p>After reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.</p>\n<p><img src=\"/blog/blog-images/urlfy.xyz.png\" alt=\"Urlfy\"></p>\n<p>Long story short, I ended building something which a call <a href=\"https://app.urlfy.xyz\" target=\"_blank\" rel=\"noopener\">Ulrfy.xyz</a>, a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello <a href=\"https://trello.com/b/YZDrArI2/urlfyxyz\" target=\"_blank\" rel=\"noopener\">board</a> where I manage my backlog is open for the public.</p>\n<p>This was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I was studying system design during the Christmas holidays of 2019, and while reading a blog <a href=\"https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444\" target=\"_blank\" rel=\"noopener\">post</a>, I found a challenge that quickly caught my attention: </p>\n<blockquote>\n<p>Given a (typically) long URL, how would you design service that would generate a shorter and unique alias for it?</p>\n</blockquote>\n<p>That sounded like a very simple web application, but then, in the same blog post, a few questions where also made:</p>\n<blockquote>\n<p>How to generate a unique ID for each URL?<br>How would you generate unique IDs at scale (thousands of URL shortening &gt;requests coming every second)?<br>How would your service handle redirects?<br>How would you support custom short URLs?<br>How to delete expired URLs etc?<br>How to track click stats?</p>\n</blockquote>\n<p>After reading the questions above, I got excited, because it sounded reasonable enough to be built in a short period, but also very important questions were raised.</p>\n<p><img src=\"/blog/blog-images/urlfy.xyz.png\" alt=\"Urlfy\"></p>\n<p>Long story short, I ended building something which a call <a href=\"https://app.urlfy.xyz\" target=\"_blank\" rel=\"noopener\">Ulrfy.xyz</a>, a URL shortening service. Some of the questions above are yet to implemented in the project, and the Trello <a href=\"https://trello.com/b/YZDrArI2/urlfyxyz\" target=\"_blank\" rel=\"noopener\">board</a> where I manage my backlog is open for the public.</p>\n<p>This was a quick post to explain how and where I got this idea, in the next posts I will explain the implementation technical details.</p>\n"},{"title":"Executing concurrent HTTP requests","date":"2019-12-22T21:09:57.000Z","description":"Read more about executing concurrent HTTP requests using Promises and async/await.","cover":"blog-images/Executing-concurrent-HTTP-requests.png","_content":"\nWhat is concurrency anyway? You've probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:\n\n>In [computer science](https://en.wikipedia.org/wiki/Computer_science), **concurrency** is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.\n\n\nWith this in mind, let's go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.\n\n## Helper function\n\nIn the script below, I implement a small helper function that uses [axios](https://www.npmjs.com/package/axios) to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.\n\n\n\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n## Non-concurrent requests\n\nIn the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. \n\nThe get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the [hrtime()](https://nodejs.org/api/process.html#process_process_hrtime_time) method from the process package.\n\n\n\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\nDue to the get function being called straight with the [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.\n\n\n\n![Non concurrent](/blog/blog-images/non-concurrent.gif)\n\n\n\n## Concurrent requests\n\nSince none of the results depend on each other, we can simply execute all the requests at once. \n\nWith just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request's execution time from 10s to 3s.\n\nIn the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. \n\n\n\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\nIn the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.\n\n\n\n![Concurrent requests](/blog/blog-images/concurrent.gif)\n\n\n\nThe Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.\n\n \n\n## References\n\n* [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n* [Concurrency vs. Parallelism, Lokesh Gupta](https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/)\n* [Concurrency model and the event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop)","source":"_posts/Executing-concurrent-HTTP-requests.md","raw":"---\ntitle: Executing concurrent HTTP requests\ndate: 2019-12-22 21:09:57\ntags: javascript, nodejs, asynchronous, programming, promises, concurrency\ndescription: Read more about executing concurrent HTTP requests using Promises and async/await.\ncover: \"blog-images/Executing-concurrent-HTTP-requests.png\"\n---\n\nWhat is concurrency anyway? You've probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:\n\n>In [computer science](https://en.wikipedia.org/wiki/Computer_science), **concurrency** is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.\n\n\nWith this in mind, let's go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.\n\n## Helper function\n\nIn the script below, I implement a small helper function that uses [axios](https://www.npmjs.com/package/axios) to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.\n\n\n\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n## Non-concurrent requests\n\nIn the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. \n\nThe get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the [hrtime()](https://nodejs.org/api/process.html#process_process_hrtime_time) method from the process package.\n\n\n\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\nDue to the get function being called straight with the [await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.\n\n\n\n![Non concurrent](/blog/blog-images/non-concurrent.gif)\n\n\n\n## Concurrent requests\n\nSince none of the results depend on each other, we can simply execute all the requests at once. \n\nWith just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request's execution time from 10s to 3s.\n\nIn the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. \n\n\n\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\nIn the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.\n\n\n\n![Concurrent requests](/blog/blog-images/concurrent.gif)\n\n\n\nThe Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.\n\n \n\n## References\n\n* [Promise.all()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)\n* [Concurrency vs. Parallelism, Lokesh Gupta](https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/)\n* [Concurrency model and the event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop)","slug":"Executing-concurrent-HTTP-requests","published":1,"updated":"2019-12-31T16:07:57.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5wh85gc00023912fj7g6u5p","content":"<p>What is concurrency anyway? You’ve probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:</p>\n<blockquote>\n<p>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_blank\" rel=\"noopener\">computer science</a>, <strong>concurrency</strong> is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.</p>\n</blockquote>\n<p>With this in mind, let’s go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.</p>\n<h2 id=\"Helper-function\"><a href=\"#Helper-function\" class=\"headerlink\" title=\"Helper function\"></a>Helper function</h2><p>In the script below, I implement a small helper function that uses <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.</p>\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n<h2 id=\"Non-concurrent-requests\"><a href=\"#Non-concurrent-requests\" class=\"headerlink\" title=\"Non-concurrent requests\"></a>Non-concurrent requests</h2><p>In the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. </p>\n<p>The get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the <a href=\"https://nodejs.org/api/process.html#process_process_hrtime_time\" target=\"_blank\" rel=\"noopener\">hrtime()</a> method from the process package.</p>\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\n<p>Due to the get function being called straight with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" target=\"_blank\" rel=\"noopener\">await</a> keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.</p>\n<p><img src=\"/blog/blog-images/non-concurrent.gif\" alt=\"Non concurrent\"></p>\n<h2 id=\"Concurrent-requests\"><a href=\"#Concurrent-requests\" class=\"headerlink\" title=\"Concurrent requests\"></a>Concurrent requests</h2><p>Since none of the results depend on each other, we can simply execute all the requests at once. </p>\n<p>With just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request’s execution time from 10s to 3s.</p>\n<p>In the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. </p>\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\n<p>In the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.</p>\n<p><img src=\"/blog/blog-images/concurrent.gif\" alt=\"Concurrent requests\"></p>\n<p>The Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">Promise.all()</a></li>\n<li><a href=\"https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/\" target=\"_blank\" rel=\"noopener\">Concurrency vs. Parallelism, Lokesh Gupta</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">Concurrency model and the event loop</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>What is concurrency anyway? You’ve probably known or heard this term somewhere, so before going into specific implementation details, let me explain or refresh you about the concurrent part using Wikipedia:</p>\n<blockquote>\n<p>In <a href=\"https://en.wikipedia.org/wiki/Computer_science\" target=\"_blank\" rel=\"noopener\">computer science</a>, <strong>concurrency</strong> is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in the partial order, without affecting the outcome. This allows for parallel execution of the concurrent units, which can significantly improve the overall speed of the execution in multi-processor and multi-core systems.</p>\n</blockquote>\n<p>With this in mind, let’s go straight to a use case where we need to write an application that executes multiple HTTP GET requests to an endpoint, stores each result in an array, and then logs the result into the terminal.</p>\n<h2 id=\"Helper-function\"><a href=\"#Helper-function\" class=\"headerlink\" title=\"Helper function\"></a>Helper function</h2><p>In the script below, I implement a small helper function that uses <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> to execute HTTP requests, at the same time these functions also logs in the terminal the time spent executing the HTTP request.</p>\n<script src=\"https://gist.github.com/flowck/9e422fe9ac958f42bfbaeee65dbcdc77.js\"></script>\n\n\n\n<h2 id=\"Non-concurrent-requests\"><a href=\"#Non-concurrent-requests\" class=\"headerlink\" title=\"Non-concurrent requests\"></a>Non-concurrent requests</h2><p>In the script below, where I manage to implement a function that takes n as a parameter, representing the number of requests to be executed. </p>\n<p>The get function returns a promise object, so I am using the await keyword inside on an async. On this same function, I am also logging the overall execution time using the <a href=\"https://nodejs.org/api/process.html#process_process_hrtime_time\" target=\"_blank\" rel=\"noopener\">hrtime()</a> method from the process package.</p>\n<script src=\"https://gist.github.com/flowck/6dcedb5e2fc5bc2153752c8fa6b46403.js\"></script>\n\n\n\n<p>Due to the get function being called straight with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" target=\"_blank\" rel=\"noopener\">await</a> keyword, the for statement only iterates next when the promise is resolved. In the image, bellow can see that each request is executed one after another.</p>\n<p><img src=\"/blog/blog-images/non-concurrent.gif\" alt=\"Non concurrent\"></p>\n<h2 id=\"Concurrent-requests\"><a href=\"#Concurrent-requests\" class=\"headerlink\" title=\"Concurrent requests\"></a>Concurrent requests</h2><p>Since none of the results depend on each other, we can simply execute all the requests at once. </p>\n<p>With just a few changes in the script above, it was possible to achieve a good level of concurrency and reduce the overall request’s execution time from 10s to 3s.</p>\n<p>In the script below, I wrap all the unfulfilled request promises in an array and then I use Promise.all all of the 50 promises. </p>\n<script src=\"https://gist.github.com/flowck/fd04fb17ef771a808baa662044c17e1b.js\"></script>\n\n\n\n<p>In the result bellow you can that the script took 3s seconds to execute 50 requests instead of 10 seconds as in the first script.</p>\n<p><img src=\"/blog/blog-images/concurrent.gif\" alt=\"Concurrent requests\"></p>\n<p>The Promise.all(results) method, returns a single promise when all the promises stored on results are fulfilled.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">Promise.all()</a></li>\n<li><a href=\"https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/\" target=\"_blank\" rel=\"noopener\">Concurrency vs. Parallelism, Lokesh Gupta</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"noopener\">Concurrency model and the event loop</a></li>\n</ul>\n"},{"title":"MongoDB/Mongoose minimal offset-based pagination","date":"2020-01-14T23:29:53.000Z","description":"Learn more about offset-based pagination using MongoDB and Mongoose","cover":"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png","_content":"\nIt's minimal because I don't implement the following features in the pagination:\n\n- Current page\n- Previous page\n- Next page\n- Total items\n\nLet's assume you have a collection called cars, and you don't want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:\n\n- To limit the query results. It's a good idea to set a default limit value.\n- Enabling API consumers to set the results limit when performing a request, using query variables.\n- Enabling API consumers to set the page or offset value when performing a query, using query variables.\n- Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.\n\nTo materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:\n\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\nIn the code above, I:\n\n- Set the default results limit value to 50.\n- I assign the query variables `limit` and `offset` values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.\n- I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using [express-validation](https://www.npmjs.com/package/express-validation) and [joi](https://www.npmjs.com/package/joi).\n- Then I finally perform the query on the `CarsModel` using the `.skip()` and `.limit()` methods.\n\n## What's the purpose of .skip()?\n\nFrom MongoDB documentation:\n\n> Skips over the specified number of [documents](https://docs.mongodb.com/manual/reference/glossary/#term-document) that pass into the stage and passes the remaining documents to the next stage in the [pipeline](https://docs.mongodb.com/manual/reference/glossary/#term-pipeline).\n\nIn more simple words, when you specify `Model.find().limit(50).skip(1)` while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.\n\n## References\n\n- [Query.prototype.skip()](https://mongoosejs.com/docs/api.html#query_Query-skip)\n- [\\$skip (aggregation)](https://docs.mongodb.com/manual/reference/operator/aggregation/skip/)\n- [Post cover author](https://urlfy.xyz/AAAF2Jno)\n","source":"_posts/MongoDB-Mongoose-minimal-offset-based-pagination.md","raw":"---\ntitle: MongoDB/Mongoose minimal offset-based pagination\ndate: 2020-01-14 23:29:53\ntags: mongodb, express, nodejs, pagination, offset\ndescription: Learn more about offset-based pagination using MongoDB and Mongoose\ncover: \"blog-images/mongodb-mongoose-minimal-offset-based-pagination.png\"\n---\n\nIt's minimal because I don't implement the following features in the pagination:\n\n- Current page\n- Previous page\n- Next page\n- Total items\n\nLet's assume you have a collection called cars, and you don't want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:\n\n- To limit the query results. It's a good idea to set a default limit value.\n- Enabling API consumers to set the results limit when performing a request, using query variables.\n- Enabling API consumers to set the page or offset value when performing a query, using query variables.\n- Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.\n\nTo materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:\n\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\nIn the code above, I:\n\n- Set the default results limit value to 50.\n- I assign the query variables `limit` and `offset` values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.\n- I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using [express-validation](https://www.npmjs.com/package/express-validation) and [joi](https://www.npmjs.com/package/joi).\n- Then I finally perform the query on the `CarsModel` using the `.skip()` and `.limit()` methods.\n\n## What's the purpose of .skip()?\n\nFrom MongoDB documentation:\n\n> Skips over the specified number of [documents](https://docs.mongodb.com/manual/reference/glossary/#term-document) that pass into the stage and passes the remaining documents to the next stage in the [pipeline](https://docs.mongodb.com/manual/reference/glossary/#term-pipeline).\n\nIn more simple words, when you specify `Model.find().limit(50).skip(1)` while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.\n\n## References\n\n- [Query.prototype.skip()](https://mongoosejs.com/docs/api.html#query_Query-skip)\n- [\\$skip (aggregation)](https://docs.mongodb.com/manual/reference/operator/aggregation/skip/)\n- [Post cover author](https://urlfy.xyz/AAAF2Jno)\n","slug":"MongoDB-Mongoose-minimal-offset-based-pagination","published":1,"updated":"2020-01-18T22:18:13.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5wh85gm00043912c4fq51k8","content":"<p>It’s minimal because I don’t implement the following features in the pagination:</p>\n<ul>\n<li>Current page</li>\n<li>Previous page</li>\n<li>Next page</li>\n<li>Total items</li>\n</ul>\n<p>Let’s assume you have a collection called cars, and you don’t want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:</p>\n<ul>\n<li>To limit the query results. It’s a good idea to set a default limit value.</li>\n<li>Enabling API consumers to set the results limit when performing a request, using query variables.</li>\n<li>Enabling API consumers to set the page or offset value when performing a query, using query variables.</li>\n<li>Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.</li>\n</ul>\n<p>To materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:</p>\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\n<p>In the code above, I:</p>\n<ul>\n<li>Set the default results limit value to 50.</li>\n<li>I assign the query variables <code>limit</code> and <code>offset</code> values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.</li>\n<li>I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using <a href=\"https://www.npmjs.com/package/express-validation\" target=\"_blank\" rel=\"noopener\">express-validation</a> and <a href=\"https://www.npmjs.com/package/joi\" target=\"_blank\" rel=\"noopener\">joi</a>.</li>\n<li>Then I finally perform the query on the <code>CarsModel</code> using the <code>.skip()</code> and <code>.limit()</code> methods.</li>\n</ul>\n<h2 id=\"What’s-the-purpose-of-skip\"><a href=\"#What’s-the-purpose-of-skip\" class=\"headerlink\" title=\"What’s the purpose of .skip()?\"></a>What’s the purpose of .skip()?</h2><p>From MongoDB documentation:</p>\n<blockquote>\n<p>Skips over the specified number of <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-document\" target=\"_blank\" rel=\"noopener\">documents</a> that pass into the stage and passes the remaining documents to the next stage in the <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-pipeline\" target=\"_blank\" rel=\"noopener\">pipeline</a>.</p>\n</blockquote>\n<p>In more simple words, when you specify <code>Model.find().limit(50).skip(1)</code> while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://mongoosejs.com/docs/api.html#query_Query-skip\" target=\"_blank\" rel=\"noopener\">Query.prototype.skip()</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/skip/\" target=\"_blank\" rel=\"noopener\">$skip (aggregation)</a></li>\n<li><a href=\"https://urlfy.xyz/AAAF2Jno\" target=\"_blank\" rel=\"noopener\">Post cover author</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s minimal because I don’t implement the following features in the pagination:</p>\n<ul>\n<li>Current page</li>\n<li>Previous page</li>\n<li>Next page</li>\n<li>Total items</li>\n</ul>\n<p>Let’s assume you have a collection called cars, and you don’t want to return all the items at once, for the sake of your frontend application or API consumers. A quick way to implement simple and yet functional pagination is:</p>\n<ul>\n<li>To limit the query results. It’s a good idea to set a default limit value.</li>\n<li>Enabling API consumers to set the results limit when performing a request, using query variables.</li>\n<li>Enabling API consumers to set the page or offset value when performing a query, using query variables.</li>\n<li>Ensuring that both query variables are integers, offset is equal or greater than 0, and the limit variable is equal or greater than 1 and less than the default limit.</li>\n</ul>\n<p>To materialize what I just described, I will be using MongoDB with Mongoose, and Nodejs with Express:</p>\n<script src=\"https://gist.github.com/flowck/c4d18846b1b23c3e9522aadf0ba22f6c.js\"></script>\n\n<p>In the code above, I:</p>\n<ul>\n<li>Set the default results limit value to 50.</li>\n<li>I assign the query variables <code>limit</code> and <code>offset</code> values as an integer in their respective constants, if they were defined or, if they were not defined, the default values 50 and 0 are used.</li>\n<li>I validate both parameters. As I told in the comments, I usually do this type of validations in the middleware level using <a href=\"https://www.npmjs.com/package/express-validation\" target=\"_blank\" rel=\"noopener\">express-validation</a> and <a href=\"https://www.npmjs.com/package/joi\" target=\"_blank\" rel=\"noopener\">joi</a>.</li>\n<li>Then I finally perform the query on the <code>CarsModel</code> using the <code>.skip()</code> and <code>.limit()</code> methods.</li>\n</ul>\n<h2 id=\"What’s-the-purpose-of-skip\"><a href=\"#What’s-the-purpose-of-skip\" class=\"headerlink\" title=\"What’s the purpose of .skip()?\"></a>What’s the purpose of .skip()?</h2><p>From MongoDB documentation:</p>\n<blockquote>\n<p>Skips over the specified number of <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-document\" target=\"_blank\" rel=\"noopener\">documents</a> that pass into the stage and passes the remaining documents to the next stage in the <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-pipeline\" target=\"_blank\" rel=\"noopener\">pipeline</a>.</p>\n</blockquote>\n<p>In more simple words, when you specify <code>Model.find().limit(50).skip(1)</code> while performing a query, MongoDB ignores the first 50 results and only returns the results starting from 51 to 101.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://mongoosejs.com/docs/api.html#query_Query-skip\" target=\"_blank\" rel=\"noopener\">Query.prototype.skip()</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/skip/\" target=\"_blank\" rel=\"noopener\">$skip (aggregation)</a></li>\n<li><a href=\"https://urlfy.xyz/AAAF2Jno\" target=\"_blank\" rel=\"noopener\">Post cover author</a></li>\n</ul>\n"},{"title":"Using SASS variables inside vue components","date":"2020-01-22T22:06:00.000Z","description":"Learn how to use SASS variables inside vue components.","cover":"blog-images/using-sass-variables-inside-vue-components.png","_content":"\n[SASS](https://sass-lang.com/) is one of the first CSS [preprocessors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor), it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.\n\nOne of SASS's coolest feature is the ability to assign values to [variables](https://sass-lang.com/documentation/variables) and then re-use it along with the project, the variables can live on a different file and be accessed by `@import './_file-were-variables-were-defined.scss'`. This also happens when you choose to use SASS on a [Vue](https://vuejs.org/) based project, but, as long as you access the variables on `.scss` or `.sass` files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, [node-sass](https://www.npmjs.com/package/node-sass?activeTab=versions) will return an error like this:\n\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n## Why does this happen?\n\n- In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.\n- SASS variables are not CSS variables, which means that after `node-sass` processes SASS files, the variables will no longer exist in the output file because `node-sass` replaces it with the real values.\n\n## How to fix this issue?\n\nUnder the hood of Vue's cli, there is webpack handling all the `.vue`, `.sass`, `.scss`, `.js` files. [Webpack](https://webpack.js.org/) with its [plugins](https://webpack.js.org/plugins/) does a series of transformations to generate plain `html`, `css` and `javascript`.\n\nThe plugin responsible to handle SASS files on webpack is [sass-loader](https://github.com/webpack-contrib/sass-loader), and on its options object it's possible to pass the `prependData` in order to share variables globally. It includes\n\n- Other .sass or .scss files\n- Style blocks defined inside Vuejs components.\n\nTo add the `prependData` option edit the `vue.config.js` file located in the root of your vuejs project generated with the Vue cli, if it doesn't exist you can create one. After that, edit or add the code below:\n\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\nIn the code above are the configurations for the node-sass plugin running on webpack. The `prependData` property receives a string with a SASS declaration importing the `sass` files where I defined the global variables. After that, you should be able to reference variables inside of your `.vue` components.\n\n## Acknowledgments\n\nI've been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.\n\n- [Natalie Weizenbaum](https://github.com/nex3)\n- [Chris Eppstein](https://github.com/chriseppstein)\n- [Hampton Catlin](https://github.com/hcatlin)\n- [Open source contributors: node-sass](https://github.com/sass/node-sass/graphs/contributors)\n- [Open source contributors: sass](https://github.com/sass/sass/graphs/contributors)\n\n## References\n\n- [sass-loader](https://webpack.js.org/loaders/sass-loader/)\n- [Sharing Global Variables](https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables)\n- [Post cover by: XiaoXiao Sun](https://unsplash.com/photos/e8e4YY65sOk)\n","source":"_posts/Using-SASS-variables-inside-vue-components.md","raw":"---\ntitle: Using SASS variables inside vue components\ndate: 2020-01-22 22:06:00\ntags: vuejs, sass\ndescription: Learn how to use SASS variables inside vue components.\ncover: \"blog-images/using-sass-variables-inside-vue-components.png\"\n---\n\n[SASS](https://sass-lang.com/) is one of the first CSS [preprocessors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor), it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.\n\nOne of SASS's coolest feature is the ability to assign values to [variables](https://sass-lang.com/documentation/variables) and then re-use it along with the project, the variables can live on a different file and be accessed by `@import './_file-were-variables-were-defined.scss'`. This also happens when you choose to use SASS on a [Vue](https://vuejs.org/) based project, but, as long as you access the variables on `.scss` or `.sass` files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, [node-sass](https://www.npmjs.com/package/node-sass?activeTab=versions) will return an error like this:\n\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n## Why does this happen?\n\n- In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.\n- SASS variables are not CSS variables, which means that after `node-sass` processes SASS files, the variables will no longer exist in the output file because `node-sass` replaces it with the real values.\n\n## How to fix this issue?\n\nUnder the hood of Vue's cli, there is webpack handling all the `.vue`, `.sass`, `.scss`, `.js` files. [Webpack](https://webpack.js.org/) with its [plugins](https://webpack.js.org/plugins/) does a series of transformations to generate plain `html`, `css` and `javascript`.\n\nThe plugin responsible to handle SASS files on webpack is [sass-loader](https://github.com/webpack-contrib/sass-loader), and on its options object it's possible to pass the `prependData` in order to share variables globally. It includes\n\n- Other .sass or .scss files\n- Style blocks defined inside Vuejs components.\n\nTo add the `prependData` option edit the `vue.config.js` file located in the root of your vuejs project generated with the Vue cli, if it doesn't exist you can create one. After that, edit or add the code below:\n\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\nIn the code above are the configurations for the node-sass plugin running on webpack. The `prependData` property receives a string with a SASS declaration importing the `sass` files where I defined the global variables. After that, you should be able to reference variables inside of your `.vue` components.\n\n## Acknowledgments\n\nI've been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.\n\n- [Natalie Weizenbaum](https://github.com/nex3)\n- [Chris Eppstein](https://github.com/chriseppstein)\n- [Hampton Catlin](https://github.com/hcatlin)\n- [Open source contributors: node-sass](https://github.com/sass/node-sass/graphs/contributors)\n- [Open source contributors: sass](https://github.com/sass/sass/graphs/contributors)\n\n## References\n\n- [sass-loader](https://webpack.js.org/loaders/sass-loader/)\n- [Sharing Global Variables](https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables)\n- [Post cover by: XiaoXiao Sun](https://unsplash.com/photos/e8e4YY65sOk)\n","slug":"Using-SASS-variables-inside-vue-components","published":1,"updated":"2020-01-22T22:12:09.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5wh85gq00053912egy7hb73","content":"<p><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS</a> is one of the first CSS <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\" target=\"_blank\" rel=\"noopener\">preprocessors</a>, it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.</p>\n<p>One of SASS’s coolest feature is the ability to assign values to <a href=\"https://sass-lang.com/documentation/variables\" target=\"_blank\" rel=\"noopener\">variables</a> and then re-use it along with the project, the variables can live on a different file and be accessed by <code>@import &#39;./_file-were-variables-were-defined.scss&#39;</code>. This also happens when you choose to use SASS on a <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> based project, but, as long as you access the variables on <code>.scss</code> or <code>.sass</code> files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, <a href=\"https://www.npmjs.com/package/node-sass?activeTab=versions\" target=\"_blank\" rel=\"noopener\">node-sass</a> will return an error like this:</p>\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n<h2 id=\"Why-does-this-happen\"><a href=\"#Why-does-this-happen\" class=\"headerlink\" title=\"Why does this happen?\"></a>Why does this happen?</h2><ul>\n<li>In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.</li>\n<li>SASS variables are not CSS variables, which means that after <code>node-sass</code> processes SASS files, the variables will no longer exist in the output file because <code>node-sass</code> replaces it with the real values.</li>\n</ul>\n<h2 id=\"How-to-fix-this-issue\"><a href=\"#How-to-fix-this-issue\" class=\"headerlink\" title=\"How to fix this issue?\"></a>How to fix this issue?</h2><p>Under the hood of Vue’s cli, there is webpack handling all the <code>.vue</code>, <code>.sass</code>, <code>.scss</code>, <code>.js</code> files. <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> with its <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> does a series of transformations to generate plain <code>html</code>, <code>css</code> and <code>javascript</code>.</p>\n<p>The plugin responsible to handle SASS files on webpack is <a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a>, and on its options object it’s possible to pass the <code>prependData</code> in order to share variables globally. It includes</p>\n<ul>\n<li>Other .sass or .scss files</li>\n<li>Style blocks defined inside Vuejs components.</li>\n</ul>\n<p>To add the <code>prependData</code> option edit the <code>vue.config.js</code> file located in the root of your vuejs project generated with the Vue cli, if it doesn’t exist you can create one. After that, edit or add the code below:</p>\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\n<p>In the code above are the configurations for the node-sass plugin running on webpack. The <code>prependData</code> property receives a string with a SASS declaration importing the <code>sass</code> files where I defined the global variables. After that, you should be able to reference variables inside of your <code>.vue</code> components.</p>\n<h2 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h2><p>I’ve been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.</p>\n<ul>\n<li><a href=\"https://github.com/nex3\" target=\"_blank\" rel=\"noopener\">Natalie Weizenbaum</a></li>\n<li><a href=\"https://github.com/chriseppstein\" target=\"_blank\" rel=\"noopener\">Chris Eppstein</a></li>\n<li><a href=\"https://github.com/hcatlin\" target=\"_blank\" rel=\"noopener\">Hampton Catlin</a></li>\n<li><a href=\"https://github.com/sass/node-sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: node-sass</a></li>\n<li><a href=\"https://github.com/sass/sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: sass</a></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://webpack.js.org/loaders/sass-loader/\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables\" target=\"_blank\" rel=\"noopener\">Sharing Global Variables</a></li>\n<li><a href=\"https://unsplash.com/photos/e8e4YY65sOk\" target=\"_blank\" rel=\"noopener\">Post cover by: XiaoXiao Sun</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS</a> is one of the first CSS <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\" target=\"_blank\" rel=\"noopener\">preprocessors</a>, it was developed in 2006 by Natalie Weizenbaum, Chris Eppstein, and Hampton Catlin. Not only SASS is one of the oldest CSS preprocessors, but it is, also the most popular among web developers.</p>\n<p>One of SASS’s coolest feature is the ability to assign values to <a href=\"https://sass-lang.com/documentation/variables\" target=\"_blank\" rel=\"noopener\">variables</a> and then re-use it along with the project, the variables can live on a different file and be accessed by <code>@import &#39;./_file-were-variables-were-defined.scss&#39;</code>. This also happens when you choose to use SASS on a <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> based project, but, as long as you access the variables on <code>.scss</code> or <code>.sass</code> files, if you try to access a variable that was defined in a file with these extensions inside a Vuejs component, <a href=\"https://www.npmjs.com/package/node-sass?activeTab=versions\" target=\"_blank\" rel=\"noopener\">node-sass</a> will return an error like this:</p>\n<script src=\"https://gist.github.com/flowck/f2ca5389543dce8f23caa3c921bc0978.js\"></script>\n\n<h2 id=\"Why-does-this-happen\"><a href=\"#Why-does-this-happen\" class=\"headerlink\" title=\"Why does this happen?\"></a>Why does this happen?</h2><ul>\n<li>In the development execution time, Vuejs components do not have access to any features of SASS stylesheet.</li>\n<li>SASS variables are not CSS variables, which means that after <code>node-sass</code> processes SASS files, the variables will no longer exist in the output file because <code>node-sass</code> replaces it with the real values.</li>\n</ul>\n<h2 id=\"How-to-fix-this-issue\"><a href=\"#How-to-fix-this-issue\" class=\"headerlink\" title=\"How to fix this issue?\"></a>How to fix this issue?</h2><p>Under the hood of Vue’s cli, there is webpack handling all the <code>.vue</code>, <code>.sass</code>, <code>.scss</code>, <code>.js</code> files. <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a> with its <a href=\"https://webpack.js.org/plugins/\" target=\"_blank\" rel=\"noopener\">plugins</a> does a series of transformations to generate plain <code>html</code>, <code>css</code> and <code>javascript</code>.</p>\n<p>The plugin responsible to handle SASS files on webpack is <a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a>, and on its options object it’s possible to pass the <code>prependData</code> in order to share variables globally. It includes</p>\n<ul>\n<li>Other .sass or .scss files</li>\n<li>Style blocks defined inside Vuejs components.</li>\n</ul>\n<p>To add the <code>prependData</code> option edit the <code>vue.config.js</code> file located in the root of your vuejs project generated with the Vue cli, if it doesn’t exist you can create one. After that, edit or add the code below:</p>\n<script src=\"https://gist.github.com/flowck/916cfd399f5df826a1e4d2ccc3eaf9f6.js\"></script>\n\n<p>In the code above are the configurations for the node-sass plugin running on webpack. The <code>prependData</code> property receives a string with a SASS declaration importing the <code>sass</code> files where I defined the global variables. After that, you should be able to reference variables inside of your <code>.vue</code> components.</p>\n<h2 id=\"Acknowledgments\"><a href=\"#Acknowledgments\" class=\"headerlink\" title=\"Acknowledgments\"></a>Acknowledgments</h2><p>I’ve been using SASS for a while, and only got to know the creators when I started writing this article, their work was pretty impressive and I would like to acknowledge them on this article.</p>\n<ul>\n<li><a href=\"https://github.com/nex3\" target=\"_blank\" rel=\"noopener\">Natalie Weizenbaum</a></li>\n<li><a href=\"https://github.com/chriseppstein\" target=\"_blank\" rel=\"noopener\">Chris Eppstein</a></li>\n<li><a href=\"https://github.com/hcatlin\" target=\"_blank\" rel=\"noopener\">Hampton Catlin</a></li>\n<li><a href=\"https://github.com/sass/node-sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: node-sass</a></li>\n<li><a href=\"https://github.com/sass/sass/graphs/contributors\" target=\"_blank\" rel=\"noopener\">Open source contributors: sass</a></li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://webpack.js.org/loaders/sass-loader/\" target=\"_blank\" rel=\"noopener\">sass-loader</a></li>\n<li><a href=\"https://vue-loader.vuejs.org/guide/pre-processors.html#sharing-global-variables\" target=\"_blank\" rel=\"noopener\">Sharing Global Variables</a></li>\n<li><a href=\"https://unsplash.com/photos/e8e4YY65sOk\" target=\"_blank\" rel=\"noopener\">Post cover by: XiaoXiao Sun</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck5wh85g4000139124oi26zgm","tag_id":"ck5wh85gh00033912eqbog8f9","_id":"ck5wh85h000073912gp36eya6"},{"post_id":"ck5wh85gc00023912fj7g6u5p","tag_id":"ck5wh85gx000639128qiigyn4","_id":"ck5wh85h300093912fw3dd3c9"},{"post_id":"ck5wh85gm00043912c4fq51k8","tag_id":"ck5wh85h2000839121klt9uzy","_id":"ck5wh85h5000b39122fwr7tnf"},{"post_id":"ck5wh85gq00053912egy7hb73","tag_id":"ck5wh85h4000a39123avedbhe","_id":"ck5wh85h5000c39125zp3ekg6"},{"post_id":"ck5wh85fj000039126ikn41s5","tag_id":"ck5wjt66m000d39124ntg5w26","_id":"ck5wjt66n000e3912b4s5crqw"}],"Tag":[{"name":"urlfy, shortening, idea, projects","_id":"ck5wh85gh00033912eqbog8f9"},{"name":"javascript, nodejs, asynchronous, programming, promises, concurrency","_id":"ck5wh85gx000639128qiigyn4"},{"name":"mongodb, express, nodejs, pagination, offset","_id":"ck5wh85h2000839121klt9uzy"},{"name":"vuejs, sass","_id":"ck5wh85h4000a39123avedbhe"},{"name":"mongodb","_id":"ck5wjt66m000d39124ntg5w26"}]}}